// Code generated by protoc-gen-go. DO NOT EDIT.
// source: executor.proto

package executor

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RomError int32

const (
	RomError_ROM_ERROR_UNSPECIFIED RomError = 0
	// ROM_ERROR_NO_ERROR indicates the execution ended successfully
	RomError_ROM_ERROR_NO_ERROR RomError = 1
	// ROM_ERROR_OUT_OF_GAS indicates there is not enough balance to continue the execution
	RomError_ROM_ERROR_OUT_OF_GAS RomError = 2
	// ROM_ERROR_STACK_OVERFLOW indicates a stack overflow has happened
	RomError_ROM_ERROR_STACK_OVERFLOW RomError = 3
	// ROM_ERROR_STACK_UNDERFLOW indicates a stack overflow has happened
	RomError_ROM_ERROR_STACK_UNDERFLOW RomError = 4
	// ROM_ERROR_MAX_CODE_SIZE_EXCEEDED indicates the code size is beyond the maximum
	RomError_ROM_ERROR_MAX_CODE_SIZE_EXCEEDED RomError = 5
	// ROM_ERROR_CONTRACT_ADDRESS_COLLISION there is a collision regarding contract addresses
	RomError_ROM_ERROR_CONTRACT_ADDRESS_COLLISION RomError = 6
	// ROM_ERROR_EXECUTION_REVERTED indicates the execution has been reverted
	RomError_ROM_ERROR_EXECUTION_REVERTED RomError = 7
	// ROM_ERROR_OUT_OF_COUNTERS_STEP indicates there is not enough step counters to continue the execution
	RomError_ROM_ERROR_OUT_OF_COUNTERS_STEP RomError = 8
	// ROM_ERROR_OUT_OF_COUNTERS_KECCAK indicates there is not enough keccak counters to continue the execution
	RomError_ROM_ERROR_OUT_OF_COUNTERS_KECCAK RomError = 9
	// ROM_ERROR_OUT_OF_COUNTERS_BINARY indicates there is not enough binary counters to continue the execution
	RomError_ROM_ERROR_OUT_OF_COUNTERS_BINARY RomError = 10
	// ROM_ERROR_OUT_OF_COUNTERS_MEM indicates there is not enough memory aligncounters to continue the execution
	RomError_ROM_ERROR_OUT_OF_COUNTERS_MEM RomError = 11
	// ROM_ERROR_OUT_OF_COUNTERS_ARITH indicates there is not enough arith counters to continue the execution
	RomError_ROM_ERROR_OUT_OF_COUNTERS_ARITH RomError = 12
	// ROM_ERROR_OUT_OF_COUNTERS_PADDING indicates there is not enough padding counters to continue the execution
	RomError_ROM_ERROR_OUT_OF_COUNTERS_PADDING RomError = 13
	// ROM_ERROR_OUT_OF_COUNTERS_POSEIDON indicates there is not enough poseidon counters to continue the execution
	RomError_ROM_ERROR_OUT_OF_COUNTERS_POSEIDON RomError = 14
	// ROM_ERROR_INVALID_JUMP indicates there is an invalid jump opcode
	RomError_ROM_ERROR_INVALID_JUMP RomError = 15
	// ROM_ERROR_INVALID_OPCODE indicates there is an invalid opcode
	RomError_ROM_ERROR_INVALID_OPCODE RomError = 16
	// ROM_ERROR_INVALID_STATIC indicates there is an invalid static call
	RomError_ROM_ERROR_INVALID_STATIC RomError = 17
	// ROM_ERROR_INVALID_BYTECODE_STARTS_EF indicates there is a bytecode starting with 0xEF
	RomError_ROM_ERROR_INVALID_BYTECODE_STARTS_EF RomError = 18
	// ROM_ERROR_INTRINSIC_INVALID_SIGNATURE indicates the transaction is failing at the signature intrinsic check
	RomError_ROM_ERROR_INTRINSIC_INVALID_SIGNATURE RomError = 19
	// ROM_ERROR_INTRINSIC_INVALID_CHAIN_ID indicates the transaction is failing at the chain id intrinsic check
	RomError_ROM_ERROR_INTRINSIC_INVALID_CHAIN_ID RomError = 20
	// ROM_ERROR_INTRINSIC_INVALID_NONCE indicates the transaction is failing at the nonce intrinsic check
	RomError_ROM_ERROR_INTRINSIC_INVALID_NONCE RomError = 21
	// ROM_ERROR_INTRINSIC_INVALID_GAS indicates the transaction is failing at the gas limit intrinsic check
	RomError_ROM_ERROR_INTRINSIC_INVALID_GAS_LIMIT RomError = 22
	// ROM_ERROR_INTRINSIC_INVALID_BALANCE indicates the transaction is failing at balance intrinsic check
	RomError_ROM_ERROR_INTRINSIC_INVALID_BALANCE RomError = 23
	// ROM_ERROR_INTRINSIC_INVALID_BATCH_GAS_LIMIT indicates the batch is exceeding the batch gas limit
	RomError_ROM_ERROR_INTRINSIC_INVALID_BATCH_GAS_LIMIT RomError = 24
	// ROM_ERROR_INTRINSIC_INVALID_SENDER_CODE indicates the transaction sender is invalid
	RomError_ROM_ERROR_INTRINSIC_INVALID_SENDER_CODE RomError = 25
	// ROM_ERROR_INTRINSIC_TX_GAS_OVERFLOW indicates the transaction gasLimit*gasPrice > MAX_UINT_256 - 1
	RomError_ROM_ERROR_INTRINSIC_TX_GAS_OVERFLOW RomError = 26
	// ROM_ERROR_BATCH_DATA_TOO_BIG indicates the batch_l2_data is too big to be processed
	RomError_ROM_ERROR_BATCH_DATA_TOO_BIG RomError = 27
	// ROM_ERROR_UNSUPPORTED_FORK_ID indicates that the fork id is not supported
	RomError_ROM_ERROR_UNSUPPORTED_FORK_ID RomError = 28
	// ROM_ERROR_INVALID_RLP indicates that there has been an error while parsing the RLP
	RomError_ROM_ERROR_INVALID_RLP RomError = 29
)

var RomError_name = map[int32]string{
	0:  "ROM_ERROR_UNSPECIFIED",
	1:  "ROM_ERROR_NO_ERROR",
	2:  "ROM_ERROR_OUT_OF_GAS",
	3:  "ROM_ERROR_STACK_OVERFLOW",
	4:  "ROM_ERROR_STACK_UNDERFLOW",
	5:  "ROM_ERROR_MAX_CODE_SIZE_EXCEEDED",
	6:  "ROM_ERROR_CONTRACT_ADDRESS_COLLISION",
	7:  "ROM_ERROR_EXECUTION_REVERTED",
	8:  "ROM_ERROR_OUT_OF_COUNTERS_STEP",
	9:  "ROM_ERROR_OUT_OF_COUNTERS_KECCAK",
	10: "ROM_ERROR_OUT_OF_COUNTERS_BINARY",
	11: "ROM_ERROR_OUT_OF_COUNTERS_MEM",
	12: "ROM_ERROR_OUT_OF_COUNTERS_ARITH",
	13: "ROM_ERROR_OUT_OF_COUNTERS_PADDING",
	14: "ROM_ERROR_OUT_OF_COUNTERS_POSEIDON",
	15: "ROM_ERROR_INVALID_JUMP",
	16: "ROM_ERROR_INVALID_OPCODE",
	17: "ROM_ERROR_INVALID_STATIC",
	18: "ROM_ERROR_INVALID_BYTECODE_STARTS_EF",
	19: "ROM_ERROR_INTRINSIC_INVALID_SIGNATURE",
	20: "ROM_ERROR_INTRINSIC_INVALID_CHAIN_ID",
	21: "ROM_ERROR_INTRINSIC_INVALID_NONCE",
	22: "ROM_ERROR_INTRINSIC_INVALID_GAS_LIMIT",
	23: "ROM_ERROR_INTRINSIC_INVALID_BALANCE",
	24: "ROM_ERROR_INTRINSIC_INVALID_BATCH_GAS_LIMIT",
	25: "ROM_ERROR_INTRINSIC_INVALID_SENDER_CODE",
	26: "ROM_ERROR_INTRINSIC_TX_GAS_OVERFLOW",
	27: "ROM_ERROR_BATCH_DATA_TOO_BIG",
	28: "ROM_ERROR_UNSUPPORTED_FORK_ID",
	29: "ROM_ERROR_INVALID_RLP",
}

var RomError_value = map[string]int32{
	"ROM_ERROR_UNSPECIFIED":                       0,
	"ROM_ERROR_NO_ERROR":                          1,
	"ROM_ERROR_OUT_OF_GAS":                        2,
	"ROM_ERROR_STACK_OVERFLOW":                    3,
	"ROM_ERROR_STACK_UNDERFLOW":                   4,
	"ROM_ERROR_MAX_CODE_SIZE_EXCEEDED":            5,
	"ROM_ERROR_CONTRACT_ADDRESS_COLLISION":        6,
	"ROM_ERROR_EXECUTION_REVERTED":                7,
	"ROM_ERROR_OUT_OF_COUNTERS_STEP":              8,
	"ROM_ERROR_OUT_OF_COUNTERS_KECCAK":            9,
	"ROM_ERROR_OUT_OF_COUNTERS_BINARY":            10,
	"ROM_ERROR_OUT_OF_COUNTERS_MEM":               11,
	"ROM_ERROR_OUT_OF_COUNTERS_ARITH":             12,
	"ROM_ERROR_OUT_OF_COUNTERS_PADDING":           13,
	"ROM_ERROR_OUT_OF_COUNTERS_POSEIDON":          14,
	"ROM_ERROR_INVALID_JUMP":                      15,
	"ROM_ERROR_INVALID_OPCODE":                    16,
	"ROM_ERROR_INVALID_STATIC":                    17,
	"ROM_ERROR_INVALID_BYTECODE_STARTS_EF":        18,
	"ROM_ERROR_INTRINSIC_INVALID_SIGNATURE":       19,
	"ROM_ERROR_INTRINSIC_INVALID_CHAIN_ID":        20,
	"ROM_ERROR_INTRINSIC_INVALID_NONCE":           21,
	"ROM_ERROR_INTRINSIC_INVALID_GAS_LIMIT":       22,
	"ROM_ERROR_INTRINSIC_INVALID_BALANCE":         23,
	"ROM_ERROR_INTRINSIC_INVALID_BATCH_GAS_LIMIT": 24,
	"ROM_ERROR_INTRINSIC_INVALID_SENDER_CODE":     25,
	"ROM_ERROR_INTRINSIC_TX_GAS_OVERFLOW":         26,
	"ROM_ERROR_BATCH_DATA_TOO_BIG":                27,
	"ROM_ERROR_UNSUPPORTED_FORK_ID":               28,
	"ROM_ERROR_INVALID_RLP":                       29,
}

func (x RomError) String() string {
	return proto.EnumName(RomError_name, int32(x))
}

func (RomError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{0}
}

type ExecutorError int32

const (
	ExecutorError_EXECUTOR_ERROR_UNSPECIFIED ExecutorError = 0
	// EXECUTOR_ERROR_NO_ERROR indicates there was no error
	ExecutorError_EXECUTOR_ERROR_NO_ERROR ExecutorError = 1
	// EXECUTOR_ERROR_DB_ERROR indicates that there is an error connecting to the database
	ExecutorError_EXECUTOR_ERROR_DB_ERROR ExecutorError = 2
	// EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_STEPS indicates that the main execution exceeded the maximum number of steps
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_STEPS ExecutorError = 3
	// EXECUTOR_ERROR_COUNTERS_OVERFLOW_KECCAK indicates that the keccak counter exceeded the maximum
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_KECCAK ExecutorError = 4
	// EXECUTOR_ERROR_COUNTERS_OVERFLOW_BINARY indicates that the binary counter exceeded the maximum
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_BINARY ExecutorError = 5
	// EXECUTOR_ERROR_COUNTERS_OVERFLOW_MEM indicates that the memory align counter exceeded the maximum
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_MEM ExecutorError = 6
	// EXECUTOR_ERROR_COUNTERS_OVERFLOW_ARITH indicates that the arith counter exceeded the maximum
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_ARITH ExecutorError = 7
	// EXECUTOR_ERROR_COUNTERS_OVERFLOW_PADDING indicates that the padding counter exceeded the maximum
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_PADDING ExecutorError = 8
	// EXECUTOR_ERROR_COUNTERS_OVERFLOW_POSEIDON indicates that the poseidon counter exceeded the maximum
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_POSEIDON ExecutorError = 9
	// EXECUTOR_ERROR_UNSUPPORTED_FORK_ID indicates that the fork id is not supported
	ExecutorError_EXECUTOR_ERROR_UNSUPPORTED_FORK_ID ExecutorError = 10
	// EXECUTOR_ERROR_BALANCE_MISMATCH indicates that there is a balance mismatch error in the ROM
	ExecutorError_EXECUTOR_ERROR_BALANCE_MISMATCH ExecutorError = 11
	// EXECUTOR_ERROR_FEA2SCALAR indicates that there is a fea2scalar error in the execution
	ExecutorError_EXECUTOR_ERROR_FEA2SCALAR ExecutorError = 12
	// EXECUTOR_ERROR_TOS32 indicates that there is a TOS32 error in the execution
	ExecutorError_EXECUTOR_ERROR_TOS32 ExecutorError = 13
	// EXECUTOR_ERROR_SM_MAIN_INVALID_UNSIGNED_TX indicates that there is an unsigned TX in a non-process batch (i.e. in a prover request)
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_INVALID_UNSIGNED_TX ExecutorError = 14
	// EXECUTOR_ERROR_SM_MAIN_INVALID_NO_COUNTERS indicates that there is a no-counters request in a non-process batch (i.e. in a prover request)
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_INVALID_NO_COUNTERS ExecutorError = 15
	// EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOVER_DIVIDE_BY_ZERO indicates that there is a divide-by-zero situation during an ECRecover
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOVER_DIVIDE_BY_ZERO ExecutorError = 16
	// EXECUTOR_ERROR_SM_MAIN_ADDRESS_OUT_OF_RANGE indicates that an address is out of valid memory space range
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_ADDRESS_OUT_OF_RANGE ExecutorError = 17
	// EXECUTOR_ERROR_SM_MAIN_ADDRESS_NEGATIVE indicates that an address is negative
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_ADDRESS_NEGATIVE ExecutorError = 18
	// EXECUTOR_ERROR_SM_MAIN_STORAGE_INVALID_KEY indicates that a register value is out of range while building storage key
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_STORAGE_INVALID_KEY ExecutorError = 19
	// EXECUTOR_ERROR_SM_MAIN_HASHK indicates that a register value is out of range while calculating a Keccak hash
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHK ExecutorError = 20
	// EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_OUT_OF_RANGE indicates that a size register value is out of range while calculating a Keccak hash
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_OUT_OF_RANGE ExecutorError = 21
	// EXECUTOR_ERROR_SM_MAIN_HASHK_POSITION_NEGATIVE indicates that a position register value is negative while calculating a Keccak hash
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHK_POSITION_NEGATIVE ExecutorError = 22
	// EXECUTOR_ERROR_SM_MAIN_HASHK_POSITION_PLUS_SIZE_OUT_OF_RANGE indicates that a position register value plus a size register value is out of range while calculating a Keccak hash
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHK_POSITION_PLUS_SIZE_OUT_OF_RANGE ExecutorError = 23
	// EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_ADDRESS_NOT_FOUND indicates that an address has not been found while calculating a Keccak hash digest
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_ADDRESS_NOT_FOUND ExecutorError = 24
	// EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_COMPLETED indicates that the hash has not been completed while calling a Keccak hash digest
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_COMPLETED ExecutorError = 25
	// EXECUTOR_ERROR_SM_MAIN_HASHP indicates that a register value is out of range while calculating a Poseidon hash
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHP ExecutorError = 26
	// EXECUTOR_ERROR_SM_MAIN_HASHP_SIZE_OUT_OF_RANGE indicates that a size register value is out of range while calculating a Poseidon hash
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHP_SIZE_OUT_OF_RANGE ExecutorError = 27
	// EXECUTOR_ERROR_SM_MAIN_HASHP_POSITION_NEGATIVE indicates that a position register value is negative while calculating a Poseidon hash
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHP_POSITION_NEGATIVE ExecutorError = 28
	// EXECUTOR_ERROR_SM_MAIN_HASHP_POSITION_PLUS_SIZE_OUT_OF_RANGE indicates that a position register value plus a size register value is out of range while calculating a Poseidon hash
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHP_POSITION_PLUS_SIZE_OUT_OF_RANGE ExecutorError = 29
	// EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_ADDRESS_NOT_FOUND indicates that an address has not been found while calculating a Poseidon hash digest
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_ADDRESS_NOT_FOUND ExecutorError = 30
	// EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_NOT_COMPLETED indicates that the hash has not been completed while calling a Poseidon hash digest
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_NOT_COMPLETED ExecutorError = 31
	// EXECUTOR_ERROR_SM_MAIN_MEMALIGN_OFFSET_OUT_OF_RANGE indicates that the an offset register value is out of range while doing a mem align operation
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_MEMALIGN_OFFSET_OUT_OF_RANGE ExecutorError = 32
	// EXECUTOR_ERROR_SM_MAIN_MULTIPLE_FREEIN indicates that we got more than one free inputs in one ROM instruction
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_MULTIPLE_FREEIN ExecutorError = 33
	// EXECUTOR_ERROR_SM_MAIN_ASSERT indicates that the ROM assert instruction failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_ASSERT ExecutorError = 34
	// EXECUTOR_ERROR_SM_MAIN_MEMORY indicates that the memory instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_MEMORY ExecutorError = 35
	// EXECUTOR_ERROR_SM_MAIN_STORAGE_READ_MISMATCH indicates that the storage read instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_STORAGE_READ_MISMATCH ExecutorError = 36
	// EXECUTOR_ERROR_SM_MAIN_STORAGE_WRITE_MISMATCH indicates that the storage read instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_STORAGE_WRITE_MISMATCH ExecutorError = 37
	// EXECUTOR_ERROR_SM_MAIN_HASHK_VALUE_MISMATCH indicates that the Keccak hash instruction value check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHK_VALUE_MISMATCH ExecutorError = 38
	// EXECUTOR_ERROR_SM_MAIN_HASHK_PADDING_MISMATCH indicates that the Keccak hash instruction padding check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHK_PADDING_MISMATCH ExecutorError = 39
	// EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_MISMATCH indicates that the Keccak hash instruction size check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_MISMATCH ExecutorError = 40
	// EXECUTOR_ERROR_SM_MAIN_HASHKLEN_LENGTH_MISMATCH indicates that the Keccak hash length instruction length check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHKLEN_LENGTH_MISMATCH ExecutorError = 41
	// EXECUTOR_ERROR_SM_MAIN_HASHKLEN_CALLED_TWICE indicates that the Keccak hash length instruction called once check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHKLEN_CALLED_TWICE ExecutorError = 42
	// EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_FOUND indicates that the Keccak hash digest instruction slot not found
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_FOUND ExecutorError = 43
	// EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_DIGEST_MISMATCH indicates that the Keccak hash digest instruction digest check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_DIGEST_MISMATCH ExecutorError = 44
	// EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_CALLED_TWICE indicates that the Keccak hash digest instruction called once check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_CALLED_TWICE ExecutorError = 45
	// EXECUTOR_ERROR_SM_MAIN_HASHP_VALUE_MISMATCH indicates that the Poseidon hash instruction value check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHP_VALUE_MISMATCH ExecutorError = 46
	// EXECUTOR_ERROR_SM_MAIN_HASHP_PADDING_MISMATCH indicates that the Poseidon hash instruction padding check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHP_PADDING_MISMATCH ExecutorError = 47
	// EXECUTOR_ERROR_SM_MAIN_HASHP_SIZE_MISMATCH indicates that the Poseidon hash instruction size check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHP_SIZE_MISMATCH ExecutorError = 48
	// EXECUTOR_ERROR_SM_MAIN_HASHPLEN_LENGTH_MISMATCH indicates that the Poseidon hash length instruction length check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHPLEN_LENGTH_MISMATCH ExecutorError = 49
	// EXECUTOR_ERROR_SM_MAIN_HASHPLEN_CALLED_TWICE indicates that the Poseidon hash length instruction called once check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHPLEN_CALLED_TWICE ExecutorError = 50
	// EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_DIGEST_MISMATCH indicates that the Poseidon hash digest instruction digest check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_DIGEST_MISMATCH ExecutorError = 51
	// EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_CALLED_TWICE indicates that the Poseidon hash digest instruction called once check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_CALLED_TWICE ExecutorError = 52
	// EXECUTOR_ERROR_SM_MAIN_ARITH_MISMATCH indicates that the arith instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_ARITH_MISMATCH ExecutorError = 53
	// EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOVER_MISMATCH indicates that the arith ECRecover instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOVER_MISMATCH ExecutorError = 54
	// EXECUTOR_ERROR_SM_MAIN_BINARY_ADD_MISMATCH indicates that the binary add instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_BINARY_ADD_MISMATCH ExecutorError = 55
	// EXECUTOR_ERROR_SM_MAIN_BINARY_SUB_MISMATCH indicates that the binary sub instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_BINARY_SUB_MISMATCH ExecutorError = 56
	// EXECUTOR_ERROR_SM_MAIN_BINARY_LT_MISMATCH indicates that the binary less than instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_BINARY_LT_MISMATCH ExecutorError = 57
	// EXECUTOR_ERROR_SM_MAIN_BINARY_SLT_MISMATCH indicates that the binary signed less than instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_BINARY_SLT_MISMATCH ExecutorError = 58
	// EXECUTOR_ERROR_SM_MAIN_BINARY_EQ_MISMATCH indicates that the binary equal instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_BINARY_EQ_MISMATCH ExecutorError = 59
	// EXECUTOR_ERROR_SM_MAIN_BINARY_AND_MISMATCH indicates that the binary and instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_BINARY_AND_MISMATCH ExecutorError = 60
	// EXECUTOR_ERROR_SM_MAIN_BINARY_OR_MISMATCH indicates that the binary or instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_BINARY_OR_MISMATCH ExecutorError = 61
	// EXECUTOR_ERROR_SM_MAIN_BINARY_XOR_MISMATCH indicates that the binary xor instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_BINARY_XOR_MISMATCH ExecutorError = 62
	// EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE_MISMATCH indicates that the memory align write instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE_MISMATCH ExecutorError = 63
	// EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE8_MISMATCH indicates that the memory align write 8 instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE8_MISMATCH ExecutorError = 64
	// EXECUTOR_ERROR_SM_MAIN_MEMALIGN_READ_MISMATCH indicates that the memory align read instruction check failed
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_MEMALIGN_READ_MISMATCH ExecutorError = 65
	// EXECUTOR_ERROR_SM_MAIN_JMPN_OUT_OF_RANGE indicates that the JMPN instruction found a jump position out of range
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_JMPN_OUT_OF_RANGE ExecutorError = 66
	// EXECUTOR_ERROR_SM_MAIN_HASHK_READ_OUT_OF_RANGE indicates that the main execution Keccak check found read out of range
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHK_READ_OUT_OF_RANGE ExecutorError = 67
	// EXECUTOR_ERROR_SM_MAIN_HASHP_READ_OUT_OF_RANGE indicates that the main execution Poseidon check found read out of range
	ExecutorError_EXECUTOR_ERROR_SM_MAIN_HASHP_READ_OUT_OF_RANGE ExecutorError = 68
)

var ExecutorError_name = map[int32]string{
	0:  "EXECUTOR_ERROR_UNSPECIFIED",
	1:  "EXECUTOR_ERROR_NO_ERROR",
	2:  "EXECUTOR_ERROR_DB_ERROR",
	3:  "EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_STEPS",
	4:  "EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_KECCAK",
	5:  "EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_BINARY",
	6:  "EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_MEM",
	7:  "EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_ARITH",
	8:  "EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_PADDING",
	9:  "EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_POSEIDON",
	10: "EXECUTOR_ERROR_UNSUPPORTED_FORK_ID",
	11: "EXECUTOR_ERROR_BALANCE_MISMATCH",
	12: "EXECUTOR_ERROR_FEA2SCALAR",
	13: "EXECUTOR_ERROR_TOS32",
	14: "EXECUTOR_ERROR_SM_MAIN_INVALID_UNSIGNED_TX",
	15: "EXECUTOR_ERROR_SM_MAIN_INVALID_NO_COUNTERS",
	16: "EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOVER_DIVIDE_BY_ZERO",
	17: "EXECUTOR_ERROR_SM_MAIN_ADDRESS_OUT_OF_RANGE",
	18: "EXECUTOR_ERROR_SM_MAIN_ADDRESS_NEGATIVE",
	19: "EXECUTOR_ERROR_SM_MAIN_STORAGE_INVALID_KEY",
	20: "EXECUTOR_ERROR_SM_MAIN_HASHK",
	21: "EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_OUT_OF_RANGE",
	22: "EXECUTOR_ERROR_SM_MAIN_HASHK_POSITION_NEGATIVE",
	23: "EXECUTOR_ERROR_SM_MAIN_HASHK_POSITION_PLUS_SIZE_OUT_OF_RANGE",
	24: "EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_ADDRESS_NOT_FOUND",
	25: "EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_COMPLETED",
	26: "EXECUTOR_ERROR_SM_MAIN_HASHP",
	27: "EXECUTOR_ERROR_SM_MAIN_HASHP_SIZE_OUT_OF_RANGE",
	28: "EXECUTOR_ERROR_SM_MAIN_HASHP_POSITION_NEGATIVE",
	29: "EXECUTOR_ERROR_SM_MAIN_HASHP_POSITION_PLUS_SIZE_OUT_OF_RANGE",
	30: "EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_ADDRESS_NOT_FOUND",
	31: "EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_NOT_COMPLETED",
	32: "EXECUTOR_ERROR_SM_MAIN_MEMALIGN_OFFSET_OUT_OF_RANGE",
	33: "EXECUTOR_ERROR_SM_MAIN_MULTIPLE_FREEIN",
	34: "EXECUTOR_ERROR_SM_MAIN_ASSERT",
	35: "EXECUTOR_ERROR_SM_MAIN_MEMORY",
	36: "EXECUTOR_ERROR_SM_MAIN_STORAGE_READ_MISMATCH",
	37: "EXECUTOR_ERROR_SM_MAIN_STORAGE_WRITE_MISMATCH",
	38: "EXECUTOR_ERROR_SM_MAIN_HASHK_VALUE_MISMATCH",
	39: "EXECUTOR_ERROR_SM_MAIN_HASHK_PADDING_MISMATCH",
	40: "EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_MISMATCH",
	41: "EXECUTOR_ERROR_SM_MAIN_HASHKLEN_LENGTH_MISMATCH",
	42: "EXECUTOR_ERROR_SM_MAIN_HASHKLEN_CALLED_TWICE",
	43: "EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_FOUND",
	44: "EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_DIGEST_MISMATCH",
	45: "EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_CALLED_TWICE",
	46: "EXECUTOR_ERROR_SM_MAIN_HASHP_VALUE_MISMATCH",
	47: "EXECUTOR_ERROR_SM_MAIN_HASHP_PADDING_MISMATCH",
	48: "EXECUTOR_ERROR_SM_MAIN_HASHP_SIZE_MISMATCH",
	49: "EXECUTOR_ERROR_SM_MAIN_HASHPLEN_LENGTH_MISMATCH",
	50: "EXECUTOR_ERROR_SM_MAIN_HASHPLEN_CALLED_TWICE",
	51: "EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_DIGEST_MISMATCH",
	52: "EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_CALLED_TWICE",
	53: "EXECUTOR_ERROR_SM_MAIN_ARITH_MISMATCH",
	54: "EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOVER_MISMATCH",
	55: "EXECUTOR_ERROR_SM_MAIN_BINARY_ADD_MISMATCH",
	56: "EXECUTOR_ERROR_SM_MAIN_BINARY_SUB_MISMATCH",
	57: "EXECUTOR_ERROR_SM_MAIN_BINARY_LT_MISMATCH",
	58: "EXECUTOR_ERROR_SM_MAIN_BINARY_SLT_MISMATCH",
	59: "EXECUTOR_ERROR_SM_MAIN_BINARY_EQ_MISMATCH",
	60: "EXECUTOR_ERROR_SM_MAIN_BINARY_AND_MISMATCH",
	61: "EXECUTOR_ERROR_SM_MAIN_BINARY_OR_MISMATCH",
	62: "EXECUTOR_ERROR_SM_MAIN_BINARY_XOR_MISMATCH",
	63: "EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE_MISMATCH",
	64: "EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE8_MISMATCH",
	65: "EXECUTOR_ERROR_SM_MAIN_MEMALIGN_READ_MISMATCH",
	66: "EXECUTOR_ERROR_SM_MAIN_JMPN_OUT_OF_RANGE",
	67: "EXECUTOR_ERROR_SM_MAIN_HASHK_READ_OUT_OF_RANGE",
	68: "EXECUTOR_ERROR_SM_MAIN_HASHP_READ_OUT_OF_RANGE",
}

var ExecutorError_value = map[string]int32{
	"EXECUTOR_ERROR_UNSPECIFIED":                                   0,
	"EXECUTOR_ERROR_NO_ERROR":                                      1,
	"EXECUTOR_ERROR_DB_ERROR":                                      2,
	"EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_STEPS":               3,
	"EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_KECCAK":              4,
	"EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_BINARY":              5,
	"EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_MEM":                 6,
	"EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_ARITH":               7,
	"EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_PADDING":             8,
	"EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_POSEIDON":            9,
	"EXECUTOR_ERROR_UNSUPPORTED_FORK_ID":                           10,
	"EXECUTOR_ERROR_BALANCE_MISMATCH":                              11,
	"EXECUTOR_ERROR_FEA2SCALAR":                                    12,
	"EXECUTOR_ERROR_TOS32":                                         13,
	"EXECUTOR_ERROR_SM_MAIN_INVALID_UNSIGNED_TX":                   14,
	"EXECUTOR_ERROR_SM_MAIN_INVALID_NO_COUNTERS":                   15,
	"EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOVER_DIVIDE_BY_ZERO":        16,
	"EXECUTOR_ERROR_SM_MAIN_ADDRESS_OUT_OF_RANGE":                  17,
	"EXECUTOR_ERROR_SM_MAIN_ADDRESS_NEGATIVE":                      18,
	"EXECUTOR_ERROR_SM_MAIN_STORAGE_INVALID_KEY":                   19,
	"EXECUTOR_ERROR_SM_MAIN_HASHK":                                 20,
	"EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_OUT_OF_RANGE":               21,
	"EXECUTOR_ERROR_SM_MAIN_HASHK_POSITION_NEGATIVE":               22,
	"EXECUTOR_ERROR_SM_MAIN_HASHK_POSITION_PLUS_SIZE_OUT_OF_RANGE": 23,
	"EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_ADDRESS_NOT_FOUND":         24,
	"EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_COMPLETED":             25,
	"EXECUTOR_ERROR_SM_MAIN_HASHP":                                 26,
	"EXECUTOR_ERROR_SM_MAIN_HASHP_SIZE_OUT_OF_RANGE":               27,
	"EXECUTOR_ERROR_SM_MAIN_HASHP_POSITION_NEGATIVE":               28,
	"EXECUTOR_ERROR_SM_MAIN_HASHP_POSITION_PLUS_SIZE_OUT_OF_RANGE": 29,
	"EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_ADDRESS_NOT_FOUND":         30,
	"EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_NOT_COMPLETED":             31,
	"EXECUTOR_ERROR_SM_MAIN_MEMALIGN_OFFSET_OUT_OF_RANGE":          32,
	"EXECUTOR_ERROR_SM_MAIN_MULTIPLE_FREEIN":                       33,
	"EXECUTOR_ERROR_SM_MAIN_ASSERT":                                34,
	"EXECUTOR_ERROR_SM_MAIN_MEMORY":                                35,
	"EXECUTOR_ERROR_SM_MAIN_STORAGE_READ_MISMATCH":                 36,
	"EXECUTOR_ERROR_SM_MAIN_STORAGE_WRITE_MISMATCH":                37,
	"EXECUTOR_ERROR_SM_MAIN_HASHK_VALUE_MISMATCH":                  38,
	"EXECUTOR_ERROR_SM_MAIN_HASHK_PADDING_MISMATCH":                39,
	"EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_MISMATCH":                   40,
	"EXECUTOR_ERROR_SM_MAIN_HASHKLEN_LENGTH_MISMATCH":              41,
	"EXECUTOR_ERROR_SM_MAIN_HASHKLEN_CALLED_TWICE":                 42,
	"EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT_FOUND":                 43,
	"EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_DIGEST_MISMATCH":           44,
	"EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_CALLED_TWICE":              45,
	"EXECUTOR_ERROR_SM_MAIN_HASHP_VALUE_MISMATCH":                  46,
	"EXECUTOR_ERROR_SM_MAIN_HASHP_PADDING_MISMATCH":                47,
	"EXECUTOR_ERROR_SM_MAIN_HASHP_SIZE_MISMATCH":                   48,
	"EXECUTOR_ERROR_SM_MAIN_HASHPLEN_LENGTH_MISMATCH":              49,
	"EXECUTOR_ERROR_SM_MAIN_HASHPLEN_CALLED_TWICE":                 50,
	"EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_DIGEST_MISMATCH":           51,
	"EXECUTOR_ERROR_SM_MAIN_HASHPDIGEST_CALLED_TWICE":              52,
	"EXECUTOR_ERROR_SM_MAIN_ARITH_MISMATCH":                        53,
	"EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOVER_MISMATCH":              54,
	"EXECUTOR_ERROR_SM_MAIN_BINARY_ADD_MISMATCH":                   55,
	"EXECUTOR_ERROR_SM_MAIN_BINARY_SUB_MISMATCH":                   56,
	"EXECUTOR_ERROR_SM_MAIN_BINARY_LT_MISMATCH":                    57,
	"EXECUTOR_ERROR_SM_MAIN_BINARY_SLT_MISMATCH":                   58,
	"EXECUTOR_ERROR_SM_MAIN_BINARY_EQ_MISMATCH":                    59,
	"EXECUTOR_ERROR_SM_MAIN_BINARY_AND_MISMATCH":                   60,
	"EXECUTOR_ERROR_SM_MAIN_BINARY_OR_MISMATCH":                    61,
	"EXECUTOR_ERROR_SM_MAIN_BINARY_XOR_MISMATCH":                   62,
	"EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE_MISMATCH":               63,
	"EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE8_MISMATCH":              64,
	"EXECUTOR_ERROR_SM_MAIN_MEMALIGN_READ_MISMATCH":                65,
	"EXECUTOR_ERROR_SM_MAIN_JMPN_OUT_OF_RANGE":                     66,
	"EXECUTOR_ERROR_SM_MAIN_HASHK_READ_OUT_OF_RANGE":               67,
	"EXECUTOR_ERROR_SM_MAIN_HASHP_READ_OUT_OF_RANGE":               68,
}

func (x ExecutorError) String() string {
	return proto.EnumName(ExecutorError_name, int32(x))
}

func (ExecutorError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{1}
}

type ProcessBatchRequest struct {
	OldStateRoot     []byte `protobuf:"bytes,1,opt,name=old_state_root,json=oldStateRoot,proto3" json:"old_state_root,omitempty"`
	OldAccInputHash  []byte `protobuf:"bytes,2,opt,name=old_acc_input_hash,json=oldAccInputHash,proto3" json:"old_acc_input_hash,omitempty"`
	OldBatchNum      uint64 `protobuf:"varint,3,opt,name=old_batch_num,json=oldBatchNum,proto3" json:"old_batch_num,omitempty"`
	ChainId          uint64 `protobuf:"varint,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ForkId           uint64 `protobuf:"varint,5,opt,name=fork_id,json=forkId,proto3" json:"fork_id,omitempty"`
	BatchL2Data      []byte `protobuf:"bytes,6,opt,name=batch_l2_data,json=batchL2Data,proto3" json:"batch_l2_data,omitempty"`
	GlobalExitRoot   []byte `protobuf:"bytes,7,opt,name=global_exit_root,json=globalExitRoot,proto3" json:"global_exit_root,omitempty"`
	EthTimestamp     uint64 `protobuf:"varint,8,opt,name=eth_timestamp,json=ethTimestamp,proto3" json:"eth_timestamp,omitempty"`
	Coinbase         string `protobuf:"bytes,9,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	UpdateMerkleTree uint32 `protobuf:"varint,10,opt,name=update_merkle_tree,json=updateMerkleTree,proto3" json:"update_merkle_tree,omitempty"`
	// flag to indicate that counters should not be taken into account
	NoCounters uint64 `protobuf:"varint,11,opt,name=no_counters,json=noCounters,proto3" json:"no_counters,omitempty"`
	// from is used for unsigned transactions with sender
	From string `protobuf:"bytes,12,opt,name=from,proto3" json:"from,omitempty"`
	// For testing purposes only
	Db                   map[string]string `protobuf:"bytes,13,rep,name=db,proto3" json:"db,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ContractsBytecode    map[string]string `protobuf:"bytes,14,rep,name=contracts_bytecode,json=contractsBytecode,proto3" json:"contracts_bytecode,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TraceConfig          *TraceConfig      `protobuf:"bytes,15,opt,name=trace_config,json=traceConfig,proto3" json:"trace_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ProcessBatchRequest) Reset()         { *m = ProcessBatchRequest{} }
func (m *ProcessBatchRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessBatchRequest) ProtoMessage()    {}
func (*ProcessBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{0}
}

func (m *ProcessBatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessBatchRequest.Unmarshal(m, b)
}
func (m *ProcessBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessBatchRequest.Marshal(b, m, deterministic)
}
func (m *ProcessBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessBatchRequest.Merge(m, src)
}
func (m *ProcessBatchRequest) XXX_Size() int {
	return xxx_messageInfo_ProcessBatchRequest.Size(m)
}
func (m *ProcessBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessBatchRequest proto.InternalMessageInfo

func (m *ProcessBatchRequest) GetOldStateRoot() []byte {
	if m != nil {
		return m.OldStateRoot
	}
	return nil
}

func (m *ProcessBatchRequest) GetOldAccInputHash() []byte {
	if m != nil {
		return m.OldAccInputHash
	}
	return nil
}

func (m *ProcessBatchRequest) GetOldBatchNum() uint64 {
	if m != nil {
		return m.OldBatchNum
	}
	return 0
}

func (m *ProcessBatchRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *ProcessBatchRequest) GetForkId() uint64 {
	if m != nil {
		return m.ForkId
	}
	return 0
}

func (m *ProcessBatchRequest) GetBatchL2Data() []byte {
	if m != nil {
		return m.BatchL2Data
	}
	return nil
}

func (m *ProcessBatchRequest) GetGlobalExitRoot() []byte {
	if m != nil {
		return m.GlobalExitRoot
	}
	return nil
}

func (m *ProcessBatchRequest) GetEthTimestamp() uint64 {
	if m != nil {
		return m.EthTimestamp
	}
	return 0
}

func (m *ProcessBatchRequest) GetCoinbase() string {
	if m != nil {
		return m.Coinbase
	}
	return ""
}

func (m *ProcessBatchRequest) GetUpdateMerkleTree() uint32 {
	if m != nil {
		return m.UpdateMerkleTree
	}
	return 0
}

func (m *ProcessBatchRequest) GetNoCounters() uint64 {
	if m != nil {
		return m.NoCounters
	}
	return 0
}

func (m *ProcessBatchRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ProcessBatchRequest) GetDb() map[string]string {
	if m != nil {
		return m.Db
	}
	return nil
}

func (m *ProcessBatchRequest) GetContractsBytecode() map[string]string {
	if m != nil {
		return m.ContractsBytecode
	}
	return nil
}

func (m *ProcessBatchRequest) GetTraceConfig() *TraceConfig {
	if m != nil {
		return m.TraceConfig
	}
	return nil
}

type ProcessBatchResponse struct {
	NewStateRoot         []byte                        `protobuf:"bytes,1,opt,name=new_state_root,json=newStateRoot,proto3" json:"new_state_root,omitempty"`
	NewAccInputHash      []byte                        `protobuf:"bytes,2,opt,name=new_acc_input_hash,json=newAccInputHash,proto3" json:"new_acc_input_hash,omitempty"`
	NewLocalExitRoot     []byte                        `protobuf:"bytes,3,opt,name=new_local_exit_root,json=newLocalExitRoot,proto3" json:"new_local_exit_root,omitempty"`
	NewBatchNum          uint64                        `protobuf:"varint,4,opt,name=new_batch_num,json=newBatchNum,proto3" json:"new_batch_num,omitempty"`
	CntKeccakHashes      uint32                        `protobuf:"varint,5,opt,name=cnt_keccak_hashes,json=cntKeccakHashes,proto3" json:"cnt_keccak_hashes,omitempty"`
	CntPoseidonHashes    uint32                        `protobuf:"varint,6,opt,name=cnt_poseidon_hashes,json=cntPoseidonHashes,proto3" json:"cnt_poseidon_hashes,omitempty"`
	CntPoseidonPaddings  uint32                        `protobuf:"varint,7,opt,name=cnt_poseidon_paddings,json=cntPoseidonPaddings,proto3" json:"cnt_poseidon_paddings,omitempty"`
	CntMemAligns         uint32                        `protobuf:"varint,8,opt,name=cnt_mem_aligns,json=cntMemAligns,proto3" json:"cnt_mem_aligns,omitempty"`
	CntArithmetics       uint32                        `protobuf:"varint,9,opt,name=cnt_arithmetics,json=cntArithmetics,proto3" json:"cnt_arithmetics,omitempty"`
	CntBinaries          uint32                        `protobuf:"varint,10,opt,name=cnt_binaries,json=cntBinaries,proto3" json:"cnt_binaries,omitempty"`
	CntSteps             uint32                        `protobuf:"varint,11,opt,name=cnt_steps,json=cntSteps,proto3" json:"cnt_steps,omitempty"`
	CumulativeGasUsed    uint64                        `protobuf:"varint,12,opt,name=cumulative_gas_used,json=cumulativeGasUsed,proto3" json:"cumulative_gas_used,omitempty"`
	Responses            []*ProcessTransactionResponse `protobuf:"bytes,13,rep,name=responses,proto3" json:"responses,omitempty"`
	Error                ExecutorError                 `protobuf:"varint,14,opt,name=error,proto3,enum=executor.v1.ExecutorError" json:"error,omitempty"`
	ReadWriteAddresses   map[string]*InfoReadWrite     `protobuf:"bytes,15,rep,name=read_write_addresses,json=readWriteAddresses,proto3" json:"read_write_addresses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FlushId              uint64                        `protobuf:"varint,16,opt,name=flush_id,json=flushId,proto3" json:"flush_id,omitempty"`
	StoredFlushId        uint64                        `protobuf:"varint,17,opt,name=stored_flush_id,json=storedFlushId,proto3" json:"stored_flush_id,omitempty"`
	ProverId             string                        `protobuf:"bytes,18,opt,name=prover_id,json=proverId,proto3" json:"prover_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ProcessBatchResponse) Reset()         { *m = ProcessBatchResponse{} }
func (m *ProcessBatchResponse) String() string { return proto.CompactTextString(m) }
func (*ProcessBatchResponse) ProtoMessage()    {}
func (*ProcessBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{1}
}

func (m *ProcessBatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessBatchResponse.Unmarshal(m, b)
}
func (m *ProcessBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessBatchResponse.Marshal(b, m, deterministic)
}
func (m *ProcessBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessBatchResponse.Merge(m, src)
}
func (m *ProcessBatchResponse) XXX_Size() int {
	return xxx_messageInfo_ProcessBatchResponse.Size(m)
}
func (m *ProcessBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessBatchResponse proto.InternalMessageInfo

func (m *ProcessBatchResponse) GetNewStateRoot() []byte {
	if m != nil {
		return m.NewStateRoot
	}
	return nil
}

func (m *ProcessBatchResponse) GetNewAccInputHash() []byte {
	if m != nil {
		return m.NewAccInputHash
	}
	return nil
}

func (m *ProcessBatchResponse) GetNewLocalExitRoot() []byte {
	if m != nil {
		return m.NewLocalExitRoot
	}
	return nil
}

func (m *ProcessBatchResponse) GetNewBatchNum() uint64 {
	if m != nil {
		return m.NewBatchNum
	}
	return 0
}

func (m *ProcessBatchResponse) GetCntKeccakHashes() uint32 {
	if m != nil {
		return m.CntKeccakHashes
	}
	return 0
}

func (m *ProcessBatchResponse) GetCntPoseidonHashes() uint32 {
	if m != nil {
		return m.CntPoseidonHashes
	}
	return 0
}

func (m *ProcessBatchResponse) GetCntPoseidonPaddings() uint32 {
	if m != nil {
		return m.CntPoseidonPaddings
	}
	return 0
}

func (m *ProcessBatchResponse) GetCntMemAligns() uint32 {
	if m != nil {
		return m.CntMemAligns
	}
	return 0
}

func (m *ProcessBatchResponse) GetCntArithmetics() uint32 {
	if m != nil {
		return m.CntArithmetics
	}
	return 0
}

func (m *ProcessBatchResponse) GetCntBinaries() uint32 {
	if m != nil {
		return m.CntBinaries
	}
	return 0
}

func (m *ProcessBatchResponse) GetCntSteps() uint32 {
	if m != nil {
		return m.CntSteps
	}
	return 0
}

func (m *ProcessBatchResponse) GetCumulativeGasUsed() uint64 {
	if m != nil {
		return m.CumulativeGasUsed
	}
	return 0
}

func (m *ProcessBatchResponse) GetResponses() []*ProcessTransactionResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

func (m *ProcessBatchResponse) GetError() ExecutorError {
	if m != nil {
		return m.Error
	}
	return ExecutorError_EXECUTOR_ERROR_UNSPECIFIED
}

func (m *ProcessBatchResponse) GetReadWriteAddresses() map[string]*InfoReadWrite {
	if m != nil {
		return m.ReadWriteAddresses
	}
	return nil
}

func (m *ProcessBatchResponse) GetFlushId() uint64 {
	if m != nil {
		return m.FlushId
	}
	return 0
}

func (m *ProcessBatchResponse) GetStoredFlushId() uint64 {
	if m != nil {
		return m.StoredFlushId
	}
	return 0
}

func (m *ProcessBatchResponse) GetProverId() string {
	if m != nil {
		return m.ProverId
	}
	return ""
}

//*
// @dev GetFlushStatusResponse
// @param {last_sent_flush_id} - id of the last flush data sent to database
// @param {sending_flush_id} - id of the flush data being sent now to database
// @param {last_flush_id} - id assigned to the last call to flush
// @param {pending_to_flush_nodes} - number of SMT nodes pending to flush
// @param {pending_to_flush_program} - number of SC programs pending to flush
// @param {storing_nodes} - number of SMT nodes being stored in the hash database
// @param {storing_program} - number of SC programs being stored in the hash database
// @param {prover_id} - id assigned to this instance of the prover process
type GetFlushStatusResponse struct {
	StoredFlushId         uint64   `protobuf:"varint,1,opt,name=stored_flush_id,json=storedFlushId,proto3" json:"stored_flush_id,omitempty"`
	StoringFlushId        uint64   `protobuf:"varint,2,opt,name=storing_flush_id,json=storingFlushId,proto3" json:"storing_flush_id,omitempty"`
	LastFlushId           uint64   `protobuf:"varint,3,opt,name=last_flush_id,json=lastFlushId,proto3" json:"last_flush_id,omitempty"`
	PendingToFlushNodes   uint64   `protobuf:"varint,4,opt,name=pending_to_flush_nodes,json=pendingToFlushNodes,proto3" json:"pending_to_flush_nodes,omitempty"`
	PendingToFlushProgram uint64   `protobuf:"varint,5,opt,name=pending_to_flush_program,json=pendingToFlushProgram,proto3" json:"pending_to_flush_program,omitempty"`
	StoringNodes          uint64   `protobuf:"varint,6,opt,name=storing_nodes,json=storingNodes,proto3" json:"storing_nodes,omitempty"`
	StoringProgram        uint64   `protobuf:"varint,7,opt,name=storing_program,json=storingProgram,proto3" json:"storing_program,omitempty"`
	ProverId              string   `protobuf:"bytes,8,opt,name=prover_id,json=proverId,proto3" json:"prover_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetFlushStatusResponse) Reset()         { *m = GetFlushStatusResponse{} }
func (m *GetFlushStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetFlushStatusResponse) ProtoMessage()    {}
func (*GetFlushStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{2}
}

func (m *GetFlushStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFlushStatusResponse.Unmarshal(m, b)
}
func (m *GetFlushStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFlushStatusResponse.Marshal(b, m, deterministic)
}
func (m *GetFlushStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFlushStatusResponse.Merge(m, src)
}
func (m *GetFlushStatusResponse) XXX_Size() int {
	return xxx_messageInfo_GetFlushStatusResponse.Size(m)
}
func (m *GetFlushStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFlushStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFlushStatusResponse proto.InternalMessageInfo

func (m *GetFlushStatusResponse) GetStoredFlushId() uint64 {
	if m != nil {
		return m.StoredFlushId
	}
	return 0
}

func (m *GetFlushStatusResponse) GetStoringFlushId() uint64 {
	if m != nil {
		return m.StoringFlushId
	}
	return 0
}

func (m *GetFlushStatusResponse) GetLastFlushId() uint64 {
	if m != nil {
		return m.LastFlushId
	}
	return 0
}

func (m *GetFlushStatusResponse) GetPendingToFlushNodes() uint64 {
	if m != nil {
		return m.PendingToFlushNodes
	}
	return 0
}

func (m *GetFlushStatusResponse) GetPendingToFlushProgram() uint64 {
	if m != nil {
		return m.PendingToFlushProgram
	}
	return 0
}

func (m *GetFlushStatusResponse) GetStoringNodes() uint64 {
	if m != nil {
		return m.StoringNodes
	}
	return 0
}

func (m *GetFlushStatusResponse) GetStoringProgram() uint64 {
	if m != nil {
		return m.StoringProgram
	}
	return 0
}

func (m *GetFlushStatusResponse) GetProverId() string {
	if m != nil {
		return m.ProverId
	}
	return ""
}

// Trace configuration request params
type TraceConfig struct {
	// Disables storage (default=false)
	DisableStorage uint32 `protobuf:"varint,1,opt,name=disable_storage,json=disableStorage,proto3" json:"disable_storage,omitempty"`
	// Disables stack (default=false)
	DisableStack uint32 `protobuf:"varint,2,opt,name=disable_stack,json=disableStack,proto3" json:"disable_stack,omitempty"`
	// Enables memory (default=false)
	EnableMemory uint32 `protobuf:"varint,3,opt,name=enable_memory,json=enableMemory,proto3" json:"enable_memory,omitempty"`
	// Enables return data (default=false)
	EnableReturnData uint32 `protobuf:"varint,4,opt,name=enable_return_data,json=enableReturnData,proto3" json:"enable_return_data,omitempty"`
	// Hash of tx in batch to retrieve the execution trace
	TxHashToGenerateExecuteTrace []byte `protobuf:"bytes,5,opt,name=tx_hash_to_generate_execute_trace,json=txHashToGenerateExecuteTrace,proto3" json:"tx_hash_to_generate_execute_trace,omitempty"`
	// Hash of tx in batch to retrieve the call trace
	TxHashToGenerateCallTrace []byte   `protobuf:"bytes,6,opt,name=tx_hash_to_generate_call_trace,json=txHashToGenerateCallTrace,proto3" json:"tx_hash_to_generate_call_trace,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *TraceConfig) Reset()         { *m = TraceConfig{} }
func (m *TraceConfig) String() string { return proto.CompactTextString(m) }
func (*TraceConfig) ProtoMessage()    {}
func (*TraceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{3}
}

func (m *TraceConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TraceConfig.Unmarshal(m, b)
}
func (m *TraceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TraceConfig.Marshal(b, m, deterministic)
}
func (m *TraceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceConfig.Merge(m, src)
}
func (m *TraceConfig) XXX_Size() int {
	return xxx_messageInfo_TraceConfig.Size(m)
}
func (m *TraceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TraceConfig proto.InternalMessageInfo

func (m *TraceConfig) GetDisableStorage() uint32 {
	if m != nil {
		return m.DisableStorage
	}
	return 0
}

func (m *TraceConfig) GetDisableStack() uint32 {
	if m != nil {
		return m.DisableStack
	}
	return 0
}

func (m *TraceConfig) GetEnableMemory() uint32 {
	if m != nil {
		return m.EnableMemory
	}
	return 0
}

func (m *TraceConfig) GetEnableReturnData() uint32 {
	if m != nil {
		return m.EnableReturnData
	}
	return 0
}

func (m *TraceConfig) GetTxHashToGenerateExecuteTrace() []byte {
	if m != nil {
		return m.TxHashToGenerateExecuteTrace
	}
	return nil
}

func (m *TraceConfig) GetTxHashToGenerateCallTrace() []byte {
	if m != nil {
		return m.TxHashToGenerateCallTrace
	}
	return nil
}

type InfoReadWrite struct {
	// If nonce="" then it has not been set; if set, string is in decimal (base 10)
	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// If balance="" then it has not been set; if set, string is in decimal (base 10)
	Balance              string   `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoReadWrite) Reset()         { *m = InfoReadWrite{} }
func (m *InfoReadWrite) String() string { return proto.CompactTextString(m) }
func (*InfoReadWrite) ProtoMessage()    {}
func (*InfoReadWrite) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{4}
}

func (m *InfoReadWrite) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoReadWrite.Unmarshal(m, b)
}
func (m *InfoReadWrite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoReadWrite.Marshal(b, m, deterministic)
}
func (m *InfoReadWrite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoReadWrite.Merge(m, src)
}
func (m *InfoReadWrite) XXX_Size() int {
	return xxx_messageInfo_InfoReadWrite.Size(m)
}
func (m *InfoReadWrite) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoReadWrite.DiscardUnknown(m)
}

var xxx_messageInfo_InfoReadWrite proto.InternalMessageInfo

func (m *InfoReadWrite) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *InfoReadWrite) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

type CallTrace struct {
	Context              *TransactionContext `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Steps                []*TransactionStep  `protobuf:"bytes,2,rep,name=steps,proto3" json:"steps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CallTrace) Reset()         { *m = CallTrace{} }
func (m *CallTrace) String() string { return proto.CompactTextString(m) }
func (*CallTrace) ProtoMessage()    {}
func (*CallTrace) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{5}
}

func (m *CallTrace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CallTrace.Unmarshal(m, b)
}
func (m *CallTrace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CallTrace.Marshal(b, m, deterministic)
}
func (m *CallTrace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallTrace.Merge(m, src)
}
func (m *CallTrace) XXX_Size() int {
	return xxx_messageInfo_CallTrace.Size(m)
}
func (m *CallTrace) XXX_DiscardUnknown() {
	xxx_messageInfo_CallTrace.DiscardUnknown(m)
}

var xxx_messageInfo_CallTrace proto.InternalMessageInfo

func (m *CallTrace) GetContext() *TransactionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *CallTrace) GetSteps() []*TransactionStep {
	if m != nil {
		return m.Steps
	}
	return nil
}

type TransactionContext struct {
	// CALL or CREATE
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Sender of the transaction
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Target of the transaction
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Input data of the transaction
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// Gas of the transaction
	Gas uint64 `protobuf:"varint,5,opt,name=gas,proto3" json:"gas,omitempty"`
	// Value of the transaction
	Value string `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	// Hash of the batch in which the transaction was included
	Batch []byte `protobuf:"bytes,7,opt,name=batch,proto3" json:"batch,omitempty"`
	// Returned data from the runtime (function result or data supplied with revert opcode)
	Output []byte `protobuf:"bytes,8,opt,name=output,proto3" json:"output,omitempty"`
	// Total gas used as result of execution
	GasUsed uint64 `protobuf:"varint,9,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// Gas Price
	GasPrice string `protobuf:"bytes,10,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// Execution Time
	ExecutionTime uint32 `protobuf:"varint,11,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	// Starting state root
	OldStateRoot         []byte   `protobuf:"bytes,12,opt,name=old_state_root,json=oldStateRoot,proto3" json:"old_state_root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionContext) Reset()         { *m = TransactionContext{} }
func (m *TransactionContext) String() string { return proto.CompactTextString(m) }
func (*TransactionContext) ProtoMessage()    {}
func (*TransactionContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{6}
}

func (m *TransactionContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionContext.Unmarshal(m, b)
}
func (m *TransactionContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionContext.Marshal(b, m, deterministic)
}
func (m *TransactionContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionContext.Merge(m, src)
}
func (m *TransactionContext) XXX_Size() int {
	return xxx_messageInfo_TransactionContext.Size(m)
}
func (m *TransactionContext) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionContext.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionContext proto.InternalMessageInfo

func (m *TransactionContext) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TransactionContext) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *TransactionContext) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TransactionContext) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TransactionContext) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

func (m *TransactionContext) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TransactionContext) GetBatch() []byte {
	if m != nil {
		return m.Batch
	}
	return nil
}

func (m *TransactionContext) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *TransactionContext) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *TransactionContext) GetGasPrice() string {
	if m != nil {
		return m.GasPrice
	}
	return ""
}

func (m *TransactionContext) GetExecutionTime() uint32 {
	if m != nil {
		return m.ExecutionTime
	}
	return 0
}

func (m *TransactionContext) GetOldStateRoot() []byte {
	if m != nil {
		return m.OldStateRoot
	}
	return nil
}

type TransactionStep struct {
	StateRoot []byte `protobuf:"bytes,1,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	// Call depth
	Depth uint32 `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
	// Program counter
	Pc uint64 `protobuf:"varint,3,opt,name=pc,proto3" json:"pc,omitempty"`
	// Remaining gas
	Gas uint64 `protobuf:"varint,4,opt,name=gas,proto3" json:"gas,omitempty"`
	// Gas cost of the operation
	GasCost uint64 `protobuf:"varint,5,opt,name=gas_cost,json=gasCost,proto3" json:"gas_cost,omitempty"`
	// Gas refunded during the operation
	GasRefund uint64 `protobuf:"varint,6,opt,name=gas_refund,json=gasRefund,proto3" json:"gas_refund,omitempty"`
	// Opcode
	Op uint32 `protobuf:"varint,7,opt,name=op,proto3" json:"op,omitempty"`
	// Content of the stack
	Stack []string `protobuf:"bytes,8,rep,name=stack,proto3" json:"stack,omitempty"`
	// Content of memory, starting at memory_offset, showing only changes vs. previous step
	Memory []byte `protobuf:"bytes,9,opt,name=memory,proto3" json:"memory,omitempty"`
	// Total size of memory
	MemorySize uint32 `protobuf:"varint,10,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	// Offset of memory changes
	MemoryOffset uint32 `protobuf:"varint,11,opt,name=memory_offset,json=memoryOffset,proto3" json:"memory_offset,omitempty"`
	// Content of the stack
	// Return Data
	ReturnData []byte `protobuf:"bytes,12,opt,name=return_data,json=returnData,proto3" json:"return_data,omitempty"`
	// Contract information
	Contract *Contract `protobuf:"bytes,13,opt,name=contract,proto3" json:"contract,omitempty"`
	// Error
	Error                RomError `protobuf:"varint,14,opt,name=error,proto3,enum=executor.v1.RomError" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionStep) Reset()         { *m = TransactionStep{} }
func (m *TransactionStep) String() string { return proto.CompactTextString(m) }
func (*TransactionStep) ProtoMessage()    {}
func (*TransactionStep) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{7}
}

func (m *TransactionStep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionStep.Unmarshal(m, b)
}
func (m *TransactionStep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionStep.Marshal(b, m, deterministic)
}
func (m *TransactionStep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionStep.Merge(m, src)
}
func (m *TransactionStep) XXX_Size() int {
	return xxx_messageInfo_TransactionStep.Size(m)
}
func (m *TransactionStep) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionStep.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionStep proto.InternalMessageInfo

func (m *TransactionStep) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *TransactionStep) GetDepth() uint32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *TransactionStep) GetPc() uint64 {
	if m != nil {
		return m.Pc
	}
	return 0
}

func (m *TransactionStep) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

func (m *TransactionStep) GetGasCost() uint64 {
	if m != nil {
		return m.GasCost
	}
	return 0
}

func (m *TransactionStep) GetGasRefund() uint64 {
	if m != nil {
		return m.GasRefund
	}
	return 0
}

func (m *TransactionStep) GetOp() uint32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *TransactionStep) GetStack() []string {
	if m != nil {
		return m.Stack
	}
	return nil
}

func (m *TransactionStep) GetMemory() []byte {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *TransactionStep) GetMemorySize() uint32 {
	if m != nil {
		return m.MemorySize
	}
	return 0
}

func (m *TransactionStep) GetMemoryOffset() uint32 {
	if m != nil {
		return m.MemoryOffset
	}
	return 0
}

func (m *TransactionStep) GetReturnData() []byte {
	if m != nil {
		return m.ReturnData
	}
	return nil
}

func (m *TransactionStep) GetContract() *Contract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *TransactionStep) GetError() RomError {
	if m != nil {
		return m.Error
	}
	return RomError_ROM_ERROR_UNSPECIFIED
}

type Contract struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Caller               string   `protobuf:"bytes,2,opt,name=caller,proto3" json:"caller,omitempty"`
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Data                 []byte   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Gas                  uint64   `protobuf:"varint,5,opt,name=gas,proto3" json:"gas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Contract) Reset()         { *m = Contract{} }
func (m *Contract) String() string { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()    {}
func (*Contract) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{8}
}

func (m *Contract) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Contract.Unmarshal(m, b)
}
func (m *Contract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Contract.Marshal(b, m, deterministic)
}
func (m *Contract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contract.Merge(m, src)
}
func (m *Contract) XXX_Size() int {
	return xxx_messageInfo_Contract.Size(m)
}
func (m *Contract) XXX_DiscardUnknown() {
	xxx_messageInfo_Contract.DiscardUnknown(m)
}

var xxx_messageInfo_Contract proto.InternalMessageInfo

func (m *Contract) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Contract) GetCaller() string {
	if m != nil {
		return m.Caller
	}
	return ""
}

func (m *Contract) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Contract) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Contract) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

type ProcessTransactionResponse struct {
	// Hash of the transaction
	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// RLP encoded transaction
	// [nonce, gasPrice, gasLimit, to, value, data, v, r, s]
	RlpTx []byte `protobuf:"bytes,2,opt,name=rlp_tx,json=rlpTx,proto3" json:"rlp_tx,omitempty"`
	// Type indicates legacy transaction
	// It will be always 0 (legacy) in the executor
	Type uint32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	// Returned data from the runtime (function result or data supplied with revert opcode)
	ReturnValue []byte `protobuf:"bytes,4,opt,name=return_value,json=returnValue,proto3" json:"return_value,omitempty"`
	// Total gas left as result of execution
	GasLeft uint64 `protobuf:"varint,5,opt,name=gas_left,json=gasLeft,proto3" json:"gas_left,omitempty"`
	// Total gas used as result of execution or gas estimation
	GasUsed uint64 `protobuf:"varint,6,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// Total gas refunded as result of execution
	GasRefunded uint64 `protobuf:"varint,7,opt,name=gas_refunded,json=gasRefunded,proto3" json:"gas_refunded,omitempty"`
	// Any error encountered during the execution
	Error RomError `protobuf:"varint,8,opt,name=error,proto3,enum=executor.v1.RomError" json:"error,omitempty"`
	// New SC Address in case of SC creation
	CreateAddress string `protobuf:"bytes,9,opt,name=create_address,json=createAddress,proto3" json:"create_address,omitempty"`
	// State Root
	StateRoot []byte `protobuf:"bytes,10,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	// Logs emited by LOG opcode
	Logs []*Log `protobuf:"bytes,11,rep,name=logs,proto3" json:"logs,omitempty"`
	// Trace
	ExecutionTrace []*ExecutionTraceStep `protobuf:"bytes,13,rep,name=execution_trace,json=executionTrace,proto3" json:"execution_trace,omitempty"`
	CallTrace      *CallTrace            `protobuf:"bytes,14,opt,name=call_trace,json=callTrace,proto3" json:"call_trace,omitempty"`
	// Efective Gas Price
	EffectiveGasPrice    string   `protobuf:"bytes,15,opt,name=effective_gas_price,json=effectiveGasPrice,proto3" json:"effective_gas_price,omitempty"`
	EffectivePercentage  uint32   `protobuf:"varint,16,opt,name=effective_percentage,json=effectivePercentage,proto3" json:"effective_percentage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessTransactionResponse) Reset()         { *m = ProcessTransactionResponse{} }
func (m *ProcessTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*ProcessTransactionResponse) ProtoMessage()    {}
func (*ProcessTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{9}
}

func (m *ProcessTransactionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessTransactionResponse.Unmarshal(m, b)
}
func (m *ProcessTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessTransactionResponse.Marshal(b, m, deterministic)
}
func (m *ProcessTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessTransactionResponse.Merge(m, src)
}
func (m *ProcessTransactionResponse) XXX_Size() int {
	return xxx_messageInfo_ProcessTransactionResponse.Size(m)
}
func (m *ProcessTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessTransactionResponse proto.InternalMessageInfo

func (m *ProcessTransactionResponse) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *ProcessTransactionResponse) GetRlpTx() []byte {
	if m != nil {
		return m.RlpTx
	}
	return nil
}

func (m *ProcessTransactionResponse) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ProcessTransactionResponse) GetReturnValue() []byte {
	if m != nil {
		return m.ReturnValue
	}
	return nil
}

func (m *ProcessTransactionResponse) GetGasLeft() uint64 {
	if m != nil {
		return m.GasLeft
	}
	return 0
}

func (m *ProcessTransactionResponse) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *ProcessTransactionResponse) GetGasRefunded() uint64 {
	if m != nil {
		return m.GasRefunded
	}
	return 0
}

func (m *ProcessTransactionResponse) GetError() RomError {
	if m != nil {
		return m.Error
	}
	return RomError_ROM_ERROR_UNSPECIFIED
}

func (m *ProcessTransactionResponse) GetCreateAddress() string {
	if m != nil {
		return m.CreateAddress
	}
	return ""
}

func (m *ProcessTransactionResponse) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *ProcessTransactionResponse) GetLogs() []*Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *ProcessTransactionResponse) GetExecutionTrace() []*ExecutionTraceStep {
	if m != nil {
		return m.ExecutionTrace
	}
	return nil
}

func (m *ProcessTransactionResponse) GetCallTrace() *CallTrace {
	if m != nil {
		return m.CallTrace
	}
	return nil
}

func (m *ProcessTransactionResponse) GetEffectiveGasPrice() string {
	if m != nil {
		return m.EffectiveGasPrice
	}
	return ""
}

func (m *ProcessTransactionResponse) GetEffectivePercentage() uint32 {
	if m != nil {
		return m.EffectivePercentage
	}
	return 0
}

type Log struct {
	// Address of the contract that generated the event
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// List of topics provided by the contract
	Topics [][]byte `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	// Supplied by the contract, usually ABI-encoded
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Batch in which the transaction was included
	BatchNumber uint64 `protobuf:"varint,4,opt,name=batch_number,json=batchNumber,proto3" json:"batch_number,omitempty"`
	// Hash of the transaction
	TxHash []byte `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Index of the transaction in the block
	TxIndex uint32 `protobuf:"varint,6,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	// Hash of the batch in which the transaction was included
	BatchHash []byte `protobuf:"bytes,7,opt,name=batch_hash,json=batchHash,proto3" json:"batch_hash,omitempty"`
	// Index of the log in the block
	Index                uint32   `protobuf:"varint,8,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{10}
}

func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Log) GetTopics() [][]byte {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *Log) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Log) GetBatchNumber() uint64 {
	if m != nil {
		return m.BatchNumber
	}
	return 0
}

func (m *Log) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *Log) GetTxIndex() uint32 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

func (m *Log) GetBatchHash() []byte {
	if m != nil {
		return m.BatchHash
	}
	return nil
}

func (m *Log) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type ExecutionTraceStep struct {
	// Program Counter
	Pc uint64 `protobuf:"varint,1,opt,name=pc,proto3" json:"pc,omitempty"`
	// OpCode
	Op string `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`
	// Remaining gas
	RemainingGas uint64 `protobuf:"varint,3,opt,name=remaining_gas,json=remainingGas,proto3" json:"remaining_gas,omitempty"`
	// Gas cost of the operation
	GasCost uint64 `protobuf:"varint,4,opt,name=gas_cost,json=gasCost,proto3" json:"gas_cost,omitempty"`
	// Content of memory, starting at memory_offset, showing only changes vs. previous step
	Memory []byte `protobuf:"bytes,5,opt,name=memory,proto3" json:"memory,omitempty"`
	// Total size of memory
	MemorySize uint32 `protobuf:"varint,6,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	// Offset of memory changes
	MemoryOffset uint32 `protobuf:"varint,7,opt,name=memory_offset,json=memoryOffset,proto3" json:"memory_offset,omitempty"`
	// Content of the stack
	Stack []string `protobuf:"bytes,8,rep,name=stack,proto3" json:"stack,omitempty"`
	// Returned data
	ReturnData []byte `protobuf:"bytes,9,opt,name=return_data,json=returnData,proto3" json:"return_data,omitempty"`
	// Content of the storage
	Storage map[string]string `protobuf:"bytes,10,rep,name=storage,proto3" json:"storage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Call depth
	Depth uint32 `protobuf:"varint,11,opt,name=depth,proto3" json:"depth,omitempty"`
	// Gas refund
	GasRefund uint64 `protobuf:"varint,12,opt,name=gas_refund,json=gasRefund,proto3" json:"gas_refund,omitempty"`
	// Error
	Error                RomError `protobuf:"varint,13,opt,name=error,proto3,enum=executor.v1.RomError" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecutionTraceStep) Reset()         { *m = ExecutionTraceStep{} }
func (m *ExecutionTraceStep) String() string { return proto.CompactTextString(m) }
func (*ExecutionTraceStep) ProtoMessage()    {}
func (*ExecutionTraceStep) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{11}
}

func (m *ExecutionTraceStep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecutionTraceStep.Unmarshal(m, b)
}
func (m *ExecutionTraceStep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecutionTraceStep.Marshal(b, m, deterministic)
}
func (m *ExecutionTraceStep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionTraceStep.Merge(m, src)
}
func (m *ExecutionTraceStep) XXX_Size() int {
	return xxx_messageInfo_ExecutionTraceStep.Size(m)
}
func (m *ExecutionTraceStep) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionTraceStep.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionTraceStep proto.InternalMessageInfo

func (m *ExecutionTraceStep) GetPc() uint64 {
	if m != nil {
		return m.Pc
	}
	return 0
}

func (m *ExecutionTraceStep) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *ExecutionTraceStep) GetRemainingGas() uint64 {
	if m != nil {
		return m.RemainingGas
	}
	return 0
}

func (m *ExecutionTraceStep) GetGasCost() uint64 {
	if m != nil {
		return m.GasCost
	}
	return 0
}

func (m *ExecutionTraceStep) GetMemory() []byte {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *ExecutionTraceStep) GetMemorySize() uint32 {
	if m != nil {
		return m.MemorySize
	}
	return 0
}

func (m *ExecutionTraceStep) GetMemoryOffset() uint32 {
	if m != nil {
		return m.MemoryOffset
	}
	return 0
}

func (m *ExecutionTraceStep) GetStack() []string {
	if m != nil {
		return m.Stack
	}
	return nil
}

func (m *ExecutionTraceStep) GetReturnData() []byte {
	if m != nil {
		return m.ReturnData
	}
	return nil
}

func (m *ExecutionTraceStep) GetStorage() map[string]string {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *ExecutionTraceStep) GetDepth() uint32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *ExecutionTraceStep) GetGasRefund() uint64 {
	if m != nil {
		return m.GasRefund
	}
	return 0
}

func (m *ExecutionTraceStep) GetError() RomError {
	if m != nil {
		return m.Error
	}
	return RomError_ROM_ERROR_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("executor.v1.RomError", RomError_name, RomError_value)
	proto.RegisterEnum("executor.v1.ExecutorError", ExecutorError_name, ExecutorError_value)
	proto.RegisterType((*ProcessBatchRequest)(nil), "executor.v1.ProcessBatchRequest")
	proto.RegisterMapType((map[string]string)(nil), "executor.v1.ProcessBatchRequest.ContractsBytecodeEntry")
	proto.RegisterMapType((map[string]string)(nil), "executor.v1.ProcessBatchRequest.DbEntry")
	proto.RegisterType((*ProcessBatchResponse)(nil), "executor.v1.ProcessBatchResponse")
	proto.RegisterMapType((map[string]*InfoReadWrite)(nil), "executor.v1.ProcessBatchResponse.ReadWriteAddressesEntry")
	proto.RegisterType((*GetFlushStatusResponse)(nil), "executor.v1.GetFlushStatusResponse")
	proto.RegisterType((*TraceConfig)(nil), "executor.v1.TraceConfig")
	proto.RegisterType((*InfoReadWrite)(nil), "executor.v1.InfoReadWrite")
	proto.RegisterType((*CallTrace)(nil), "executor.v1.CallTrace")
	proto.RegisterType((*TransactionContext)(nil), "executor.v1.TransactionContext")
	proto.RegisterType((*TransactionStep)(nil), "executor.v1.TransactionStep")
	proto.RegisterType((*Contract)(nil), "executor.v1.Contract")
	proto.RegisterType((*ProcessTransactionResponse)(nil), "executor.v1.ProcessTransactionResponse")
	proto.RegisterType((*Log)(nil), "executor.v1.Log")
	proto.RegisterType((*ExecutionTraceStep)(nil), "executor.v1.ExecutionTraceStep")
	proto.RegisterMapType((map[string]string)(nil), "executor.v1.ExecutionTraceStep.StorageEntry")
}

func init() {
	proto.RegisterFile("executor.proto", fileDescriptor_12d1cdcda51e000f)
}

var fileDescriptor_12d1cdcda51e000f = []byte{
	// 3264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x5a, 0xd9, 0x7a, 0xdb, 0xc8,
	0x72, 0x1e, 0x51, 0x2b, 0x9b, 0xa4, 0x04, 0xb7, 0x64, 0x99, 0x96, 0x37, 0x89, 0xde, 0x34, 0x5e,
	0x24, 0x5b, 0x1e, 0x1f, 0xdb, 0x73, 0xce, 0xc9, 0x1c, 0x88, 0x84, 0x28, 0x1c, 0x93, 0x04, 0xd3,
	0x00, 0xbd, 0xcc, 0x0d, 0x3e, 0x10, 0x68, 0x51, 0xf8, 0x44, 0x02, 0x0c, 0x00, 0xda, 0xd2, 0x3c,
	0x44, 0x1e, 0x22, 0x37, 0x79, 0x81, 0xdc, 0x24, 0xb9, 0xcf, 0x2b, 0xe4, 0xcb, 0x13, 0xe4, 0x32,
	0xaf, 0x90, 0xaf, 0x17, 0x6c, 0xdc, 0x20, 0x5f, 0x0d, 0xbb, 0xea, 0xaf, 0xea, 0xee, 0xea, 0xfa,
	0xab, 0x0a, 0x23, 0x83, 0x75, 0x7c, 0x89, 0xcd, 0x51, 0xe0, 0x7a, 0x07, 0x43, 0xcf, 0x0d, 0x5c,
	0x58, 0x88, 0xd6, 0xdf, 0x5e, 0xef, 0xdc, 0xe9, 0xb9, 0x6e, 0xaf, 0x8f, 0x0f, 0xa9, 0xaa, 0x3b,
	0x3a, 0x3b, 0xc4, 0x83, 0x61, 0x70, 0xc5, 0x90, 0x95, 0x7f, 0x5e, 0x01, 0x9b, 0x6d, 0xcf, 0x35,
	0xb1, 0xef, 0x1f, 0x1b, 0x81, 0x79, 0x8e, 0xf0, 0x3f, 0x8d, 0xb0, 0x1f, 0xc0, 0x47, 0x60, 0xdd,
	0xed, 0x5b, 0xba, 0x1f, 0x18, 0x01, 0xd6, 0x3d, 0xd7, 0x0d, 0xca, 0x0b, 0xbb, 0x0b, 0xfb, 0x45,
	0x54, 0x74, 0xfb, 0x96, 0x4a, 0x84, 0xc8, 0x75, 0x03, 0xf8, 0x1c, 0x40, 0x82, 0x32, 0x4c, 0x53,
	0xb7, 0x9d, 0xe1, 0x28, 0xd0, 0xcf, 0x0d, 0xff, 0xbc, 0x9c, 0xa3, 0xc8, 0x0d, 0xb7, 0x6f, 0x89,
	0xa6, 0x29, 0x13, 0xf9, 0xa9, 0xe1, 0x9f, 0xc3, 0x0a, 0x28, 0x11, 0x70, 0x97, 0x6c, 0xa3, 0x3b,
	0xa3, 0x41, 0x79, 0x71, 0x77, 0x61, 0x7f, 0x09, 0x15, 0xdc, 0xbe, 0x45, 0xb7, 0x6e, 0x8d, 0x06,
	0xf0, 0x36, 0x58, 0x33, 0xcf, 0x0d, 0xdb, 0xd1, 0x6d, 0xab, 0xbc, 0x44, 0xd5, 0xab, 0x74, 0x2d,
	0x5b, 0xf0, 0x16, 0x58, 0x3d, 0x73, 0xbd, 0x0b, 0xa2, 0x59, 0xa6, 0x9a, 0x15, 0xb2, 0x94, 0x2d,
	0xe2, 0x97, 0xf9, 0xec, 0x1f, 0xe9, 0x96, 0x11, 0x18, 0xe5, 0x15, 0xba, 0x7f, 0x81, 0x0a, 0x1b,
	0x47, 0x35, 0x23, 0x30, 0xe0, 0x3e, 0x10, 0x7a, 0x7d, 0xb7, 0x6b, 0xf4, 0x75, 0x7c, 0x69, 0x07,
	0xec, 0x42, 0xab, 0x14, 0xb6, 0xce, 0xe4, 0xd2, 0xa5, 0x1d, 0xd0, 0x2b, 0x3d, 0x04, 0x25, 0x1c,
	0x9c, 0xeb, 0x81, 0x3d, 0xc0, 0x7e, 0x60, 0x0c, 0x86, 0xe5, 0x35, 0xba, 0x59, 0x11, 0x07, 0xe7,
	0x5a, 0x28, 0x83, 0x3b, 0x60, 0xcd, 0x74, 0x6d, 0xa7, 0x6b, 0xf8, 0xb8, 0x9c, 0xdf, 0x5d, 0xd8,
	0xcf, 0xa3, 0x68, 0x0d, 0x5f, 0x00, 0x38, 0x1a, 0x5a, 0x24, 0x6c, 0x03, 0xec, 0x5d, 0xf4, 0xb1,
	0x1e, 0x78, 0x18, 0x97, 0xc1, 0xee, 0xc2, 0x7e, 0x09, 0x09, 0x4c, 0xd3, 0xa4, 0x0a, 0xcd, 0xc3,
	0x18, 0x3e, 0x00, 0x05, 0xc7, 0xd5, 0x4d, 0x77, 0xe4, 0x04, 0xd8, 0xf3, 0xcb, 0x05, 0xba, 0x19,
	0x70, 0xdc, 0x2a, 0x97, 0x40, 0x08, 0x96, 0xce, 0x3c, 0x77, 0x50, 0x2e, 0xd2, 0x6d, 0xe8, 0x6f,
	0xf8, 0x1e, 0xe4, 0xac, 0x6e, 0xb9, 0xb4, 0xbb, 0xb8, 0x5f, 0x38, 0xda, 0x3f, 0x48, 0xbc, 0xf5,
	0xc1, 0x94, 0xa7, 0x3c, 0xa8, 0x75, 0x25, 0x27, 0xf0, 0xae, 0x50, 0xce, 0xea, 0xc2, 0x33, 0x00,
	0x4d, 0xd7, 0x09, 0x3c, 0xc3, 0x0c, 0x7c, 0xbd, 0x7b, 0x15, 0x60, 0xd3, 0xb5, 0x70, 0x79, 0x9d,
	0x7a, 0x7a, 0x97, 0xe9, 0xa9, 0x1a, 0x9a, 0x1e, 0x73, 0x4b, 0xe6, 0xf8, 0x86, 0x39, 0x2e, 0x87,
	0x7f, 0x06, 0x45, 0x22, 0xc1, 0xba, 0xe9, 0x3a, 0x67, 0x76, 0xaf, 0xbc, 0xb1, 0xbb, 0xb0, 0x5f,
	0x38, 0x2a, 0xa7, 0x76, 0xd0, 0x08, 0xa0, 0x4a, 0xf5, 0xa8, 0x10, 0xc4, 0x8b, 0x9d, 0xb7, 0x60,
	0x95, 0x9f, 0x19, 0x0a, 0x60, 0xf1, 0x02, 0x5f, 0xd1, 0xdc, 0xcb, 0x23, 0xf2, 0x13, 0x6e, 0x81,
	0xe5, 0x6f, 0x46, 0x7f, 0x84, 0x69, 0x96, 0xe5, 0x11, 0x5b, 0xfc, 0x9a, 0x7b, 0xbf, 0xb0, 0x53,
	0x03, 0xdb, 0xd3, 0x0f, 0xf8, 0x23, 0x5e, 0x2a, 0xff, 0xb6, 0x0a, 0xb6, 0xd2, 0x77, 0xf7, 0x87,
	0xae, 0xe3, 0x63, 0xc2, 0x08, 0x07, 0x7f, 0x9f, 0xc2, 0x08, 0x07, 0x7f, 0x4f, 0x31, 0x82, 0xa0,
	0xa6, 0x33, 0xc2, 0xc1, 0xdf, 0x53, 0x8c, 0x78, 0x09, 0x36, 0x09, 0xb8, 0xef, 0x9a, 0xa9, 0xc4,
	0x5c, 0xa4, 0x68, 0xc1, 0xc1, 0xdf, 0x1b, 0x44, 0x13, 0xa5, 0x66, 0x05, 0x94, 0x08, 0x3c, 0x26,
	0x10, 0x63, 0x48, 0xc1, 0xc1, 0xdf, 0x23, 0x02, 0x3d, 0x03, 0x37, 0x4c, 0x27, 0xd0, 0x2f, 0xb0,
	0x69, 0x1a, 0x17, 0x74, 0x73, 0xec, 0x53, 0xbe, 0x94, 0xd0, 0x86, 0xe9, 0x04, 0x1f, 0xa9, 0xfc,
	0x94, 0x8a, 0xe1, 0x01, 0xd8, 0x24, 0xd8, 0xa1, 0xeb, 0x63, 0xdb, 0x72, 0x9d, 0x10, 0xbd, 0x42,
	0xd1, 0xc4, 0x4d, 0x9b, 0x6b, 0x38, 0xfe, 0x08, 0xdc, 0x4c, 0xe1, 0x87, 0x86, 0x65, 0xd9, 0x4e,
	0xcf, 0xa7, 0x4c, 0x2a, 0xa1, 0xcd, 0x84, 0x45, 0x9b, 0xab, 0x48, 0xd4, 0x88, 0xcd, 0x00, 0x0f,
	0x74, 0xa3, 0x6f, 0xf7, 0x1c, 0x9f, 0xf2, 0xa9, 0x84, 0x8a, 0xa6, 0x13, 0x34, 0xf1, 0x40, 0xa4,
	0x32, 0xf8, 0x14, 0x90, 0xc3, 0xe9, 0x86, 0x67, 0x07, 0xe7, 0x03, 0x1c, 0xd8, 0xa6, 0x4f, 0x69,
	0x55, 0x42, 0xc4, 0x58, 0x8c, 0xa5, 0x70, 0x0f, 0x10, 0x43, 0xbd, 0x6b, 0x3b, 0x86, 0x67, 0x63,
	0x9f, 0xd3, 0xaa, 0x60, 0x3a, 0xc1, 0x31, 0x17, 0xc1, 0x3b, 0x20, 0x4f, 0x20, 0x7e, 0x80, 0x87,
	0x8c, 0x4f, 0x25, 0xb4, 0x66, 0x3a, 0x81, 0x4a, 0xd6, 0xf4, 0xca, 0xa3, 0xc1, 0xa8, 0x6f, 0x04,
	0xf6, 0x37, 0xac, 0xf7, 0x0c, 0x5f, 0x1f, 0xf9, 0xd8, 0xa2, 0xe4, 0x5a, 0x42, 0x37, 0x62, 0x55,
	0xdd, 0xf0, 0x3b, 0x3e, 0xb6, 0xa0, 0x04, 0xf2, 0x1e, 0x4f, 0x00, 0x9f, 0x13, 0xee, 0xe9, 0x34,
	0x9a, 0x68, 0x9e, 0xe1, 0xf8, 0x86, 0x19, 0xd8, 0xae, 0x13, 0x26, 0x0c, 0x8a, 0x2d, 0xe1, 0x2b,
	0xb0, 0x8c, 0x3d, 0xcf, 0xf5, 0xca, 0xeb, 0xbb, 0x0b, 0xfb, 0xeb, 0x47, 0x3b, 0x29, 0x17, 0x12,
	0xff, 0x2d, 0x11, 0x04, 0x62, 0x40, 0x78, 0x01, 0xb6, 0x3c, 0x6c, 0x58, 0xfa, 0x77, 0xcf, 0x0e,
	0xb0, 0x6e, 0x58, 0x96, 0x87, 0x7d, 0x72, 0x86, 0x0d, 0x7a, 0x86, 0x0f, 0x73, 0xa8, 0xca, 0xf6,
	0x3c, 0x40, 0xd8, 0xb0, 0x3e, 0x13, 0x63, 0x31, 0xb4, 0x65, 0x64, 0x85, 0xde, 0x84, 0x82, 0x54,
	0xdd, 0xb3, 0xfe, 0xc8, 0x3f, 0x27, 0xb5, 0x55, 0x60, 0x55, 0x97, 0xae, 0x65, 0x0b, 0x3e, 0x01,
	0x1b, 0x7e, 0xe0, 0x7a, 0xd8, 0xd2, 0x23, 0xc4, 0x0d, 0x8a, 0x28, 0x31, 0xf1, 0x09, 0xc7, 0xdd,
	0x01, 0xf9, 0xa1, 0xe7, 0x7e, 0xc3, 0x1e, 0x41, 0x40, 0x56, 0x12, 0x99, 0x40, 0xb6, 0x76, 0x0c,
	0x70, 0x6b, 0xc6, 0x71, 0xa6, 0x50, 0xf3, 0x55, 0x92, 0x9a, 0x85, 0xb1, 0x58, 0xc9, 0xce, 0x99,
	0x1b, 0xb9, 0x4a, 0xd2, 0xf6, 0x7f, 0x73, 0x60, 0xbb, 0x8e, 0x03, 0x7a, 0x1c, 0xc2, 0xc6, 0x91,
	0x1f, 0x11, 0x77, 0xca, 0x15, 0x16, 0xa6, 0x5d, 0x61, 0x1f, 0x08, 0x44, 0x60, 0x3b, 0xbd, 0x18,
	0x98, 0xa3, 0xc0, 0x75, 0x2e, 0x0f, 0x91, 0x15, 0x50, 0xea, 0x1b, 0x7e, 0x10, 0xc3, 0x78, 0x27,
	0x23, 0xc2, 0x10, 0xf3, 0x06, 0x6c, 0x0f, 0xb1, 0x43, 0x48, 0xa0, 0x07, 0x2e, 0x47, 0x3a, 0xae,
	0x85, 0x7d, 0xce, 0xda, 0x4d, 0xae, 0xd5, 0x5c, 0x6a, 0xd1, 0x22, 0x2a, 0xf8, 0x0e, 0x94, 0x27,
	0x8c, 0x86, 0x9e, 0xdb, 0xf3, 0x8c, 0x01, 0x6f, 0x7a, 0x37, 0xd3, 0x66, 0x6d, 0xa6, 0x24, 0x5d,
	0x2b, 0x3c, 0x3b, 0xdb, 0x64, 0x85, 0x75, 0x2d, 0x2e, 0x64, 0xde, 0x9f, 0xb2, 0x40, 0x10, 0x50,
	0xe8, 0x74, 0x35, 0x75, 0xbf, 0xd0, 0x5b, 0xea, 0x31, 0xd7, 0xd2, 0x8f, 0x59, 0xf9, 0x8f, 0x1c,
	0x28, 0x24, 0x4a, 0x37, 0xf1, 0x6a, 0xd9, 0xbe, 0xd1, 0xed, 0x63, 0x9d, 0xb8, 0x31, 0x7a, 0x98,
	0x86, 0xb7, 0x84, 0xd6, 0xb9, 0x58, 0x65, 0x52, 0x72, 0xc6, 0x18, 0x68, 0x98, 0x17, 0x34, 0xb8,
	0x25, 0x54, 0x8c, 0x60, 0x86, 0x79, 0x41, 0xdb, 0xaf, 0x43, 0x31, 0x03, 0x3c, 0x70, 0xbd, 0x2b,
	0x1a, 0xda, 0x12, 0x2a, 0x32, 0x61, 0x93, 0xca, 0x48, 0x8b, 0xe5, 0x20, 0x0f, 0x07, 0x23, 0xcf,
	0x61, 0x6d, 0x7f, 0x89, 0xb5, 0x58, 0xa6, 0x41, 0x54, 0x41, 0x7b, 0x7f, 0x1d, 0xec, 0x05, 0x97,
	0xb4, 0xb8, 0x91, 0xa0, 0xf6, 0xb0, 0x83, 0x3d, 0x52, 0xc2, 0x59, 0x5a, 0x91, 0xf6, 0x6c, 0x98,
	0x98, 0x46, 0xb7, 0x88, 0xee, 0x06, 0x97, 0xa4, 0xd6, 0x69, 0x6e, 0x9d, 0xa3, 0x18, 0x37, 0x31,
	0xbd, 0x2f, 0x14, 0xc1, 0xfd, 0x69, 0x8e, 0x4c, 0xa3, 0xdf, 0xe7, 0x5e, 0xd8, 0xe4, 0x71, 0x7b,
	0xdc, 0x4b, 0xd5, 0xe8, 0xf7, 0xa9, 0x8b, 0xca, 0x6f, 0xa0, 0x94, 0x4a, 0x61, 0xd2, 0x88, 0x1c,
	0xd7, 0x31, 0x31, 0x67, 0x00, 0x5b, 0xc0, 0x32, 0x58, 0xed, 0x1a, 0x7d, 0x83, 0xc8, 0x59, 0x83,
	0x0a, 0x97, 0x95, 0x3f, 0x40, 0x3e, 0xf2, 0x06, 0x3f, 0x80, 0x55, 0xd2, 0x7a, 0xf1, 0x25, 0xeb,
	0x45, 0x85, 0xa3, 0x07, 0xe3, 0x0d, 0x36, 0x2c, 0x4a, 0x55, 0x06, 0x43, 0x21, 0x1e, 0x1e, 0x81,
	0x65, 0x56, 0x21, 0x73, 0xb4, 0xa0, 0xdc, 0x9d, 0x65, 0x48, 0xca, 0x26, 0x62, 0xd0, 0xca, 0x7f,
	0xe6, 0x00, 0x9c, 0xf4, 0x49, 0x26, 0x94, 0xe0, 0x6a, 0x18, 0xde, 0x80, 0xfe, 0x8e, 0xa6, 0x96,
	0x5c, 0x62, 0x6a, 0x59, 0x07, 0xb9, 0xc0, 0xa5, 0xef, 0x99, 0x47, 0xb9, 0xc0, 0x25, 0x98, 0xe8,
	0xdd, 0x8a, 0x88, 0xfe, 0x26, 0xe5, 0xa0, 0x67, 0xf8, 0x3c, 0xd7, 0xc9, 0xcf, 0xb8, 0x53, 0xaf,
	0x24, 0x3a, 0x35, 0x91, 0xd2, 0x36, 0xc8, 0x87, 0x38, 0xb6, 0x80, 0xdb, 0x60, 0xc5, 0x1d, 0x05,
	0xc3, 0x51, 0x40, 0x93, 0xb6, 0x88, 0xf8, 0x8a, 0xd4, 0xb7, 0xa8, 0xd4, 0xe7, 0x59, 0x7d, 0xeb,
	0xf1, 0x02, 0x7f, 0x07, 0xe4, 0x89, 0x6a, 0xe8, 0xd9, 0x26, 0x1b, 0xd2, 0xf2, 0x88, 0x60, 0xdb,
	0x64, 0x0d, 0x1f, 0x87, 0x83, 0xb5, 0xed, 0x3a, 0x74, 0x22, 0xe4, 0xfd, 0xa4, 0x14, 0x49, 0xc9,
	0x48, 0x38, 0x65, 0x56, 0x2e, 0x4e, 0xce, 0xca, 0x95, 0x7f, 0x5d, 0x04, 0x1b, 0x63, 0x81, 0x85,
	0xf7, 0x00, 0x98, 0x98, 0x27, 0xf2, 0x7e, 0x34, 0x4c, 0x6c, 0x81, 0x65, 0x0b, 0x0f, 0x83, 0x73,
	0xce, 0x14, 0xb6, 0x20, 0x71, 0x1c, 0x9a, 0xbc, 0xe4, 0xe4, 0x86, 0x66, 0x18, 0xb3, 0xa5, 0x38,
	0x66, 0xfc, 0xbe, 0xa6, 0xeb, 0x07, 0x3c, 0x94, 0xe4, 0xbe, 0x55, 0xd7, 0x0f, 0xc8, 0x8e, 0x44,
	0xe5, 0xe1, 0xb3, 0x91, 0x63, 0xf1, 0x2a, 0x41, 0x22, 0x80, 0xa8, 0x80, 0xf8, 0x76, 0x87, 0xbc,
	0x9f, 0xe7, 0xdc, 0x21, 0x39, 0x01, 0xe3, 0xea, 0xda, 0xee, 0x22, 0x89, 0x3e, 0x5d, 0x90, 0x38,
	0x73, 0x76, 0xe6, 0x59, 0x9c, 0xd9, 0x8a, 0x0c, 0xb3, 0xec, 0x97, 0xee, 0xdb, 0x7f, 0x84, 0x33,
	0x2f, 0x60, 0x22, 0xd5, 0xfe, 0x83, 0x96, 0x00, 0x0e, 0x70, 0xcf, 0xce, 0x7c, 0x1c, 0xf0, 0x78,
	0x16, 0x99, 0x50, 0xa1, 0x32, 0xe2, 0x25, 0x49, 0x6b, 0x16, 0x4b, 0xe0, 0xc5, 0x84, 0x7e, 0x4d,
	0xa6, 0x6f, 0x36, 0xe8, 0x95, 0x4b, 0x34, 0xef, 0x6f, 0xa6, 0xd2, 0x37, 0x9c, 0x02, 0x51, 0x04,
	0x83, 0xcf, 0xd3, 0x0d, 0x38, 0x8d, 0x47, 0xee, 0x20, 0xd9, 0x7b, 0x2b, 0x97, 0x60, 0x2d, 0x74,
	0x41, 0x98, 0xc8, 0x9b, 0x2f, 0xcf, 0xef, 0x70, 0x49, 0x82, 0x40, 0x98, 0x8f, 0x3d, 0x9e, 0xe4,
	0x7c, 0x15, 0x27, 0xec, 0x62, 0x32, 0x61, 0xaf, 0x95, 0xec, 0x95, 0xff, 0x59, 0x02, 0x3b, 0xb3,
	0x27, 0x0a, 0xf2, 0x09, 0xc4, 0x0b, 0x10, 0xcf, 0x95, 0x15, 0x56, 0x69, 0xe0, 0x4d, 0xb0, 0xe2,
	0xf5, 0x87, 0x7a, 0x70, 0xc9, 0x27, 0xcd, 0x65, 0xaf, 0x3f, 0xd4, 0x2e, 0x23, 0x66, 0xb2, 0x1a,
	0xca, 0x98, 0xb9, 0x07, 0x8a, 0x3c, 0xba, 0xec, 0x94, 0xec, 0x40, 0x3c, 0xe2, 0x9f, 0xe8, 0x59,
	0x79, 0xfa, 0xf4, 0xf1, 0x59, 0x32, 0x7d, 0x1a, 0xf8, 0x2c, 0xcd, 0xa4, 0x95, 0x34, 0x93, 0xf6,
	0x40, 0x31, 0xce, 0x2c, 0x6c, 0xf1, 0xd6, 0x52, 0x88, 0x72, 0x0b, 0x5b, 0xf1, 0x2b, 0xac, 0x65,
	0xbf, 0x02, 0x21, 0x9f, 0xe9, 0x61, 0x23, 0x9e, 0x7e, 0xf8, 0x97, 0x56, 0x89, 0x49, 0xf9, 0x1c,
	0x31, 0x46, 0x21, 0x30, 0x4e, 0xa1, 0x47, 0x60, 0xa9, 0xef, 0xf6, 0xc8, 0x20, 0x48, 0xca, 0x9c,
	0x90, 0xda, 0xb1, 0xe1, 0xf6, 0x10, 0xd5, 0xc2, 0x53, 0xb0, 0x91, 0x20, 0x3a, 0x2d, 0xe5, 0x6c,
	0xd8, 0x7b, 0x30, 0x65, 0x52, 0x23, 0xb4, 0x27, 0x10, 0x5a, 0x1a, 0xe3, 0x02, 0xc1, 0x4a, 0xf2,
	0x5b, 0x00, 0x12, 0xfd, 0x60, 0x9d, 0x66, 0xe7, 0x76, 0x3a, 0x3b, 0xc3, 0xf2, 0x8d, 0xf2, 0x66,
	0x54, 0xc9, 0x0f, 0xc0, 0x26, 0x3e, 0x3b, 0xc3, 0x66, 0x34, 0x96, 0xb2, 0x82, 0xb4, 0x41, 0x6f,
	0x7c, 0x23, 0x52, 0xd5, 0xc3, 0xca, 0xf4, 0x1a, 0x6c, 0xc5, 0xf8, 0x21, 0xf6, 0x4c, 0xec, 0x04,
	0xa4, 0xf3, 0x0a, 0x6c, 0x12, 0x8f, 0x74, 0xed, 0x48, 0x55, 0xf9, 0xef, 0x05, 0xb0, 0xd8, 0x70,
	0x7b, 0xf3, 0x33, 0x3a, 0x70, 0x87, 0x64, 0xf8, 0x26, 0x4d, 0x81, 0x64, 0x17, 0x5d, 0x45, 0xb9,
	0xbb, 0x98, 0xc8, 0xdd, 0x3d, 0x50, 0x8c, 0xbe, 0x43, 0xba, 0xd8, 0x0b, 0x3f, 0x45, 0xba, 0xfc,
	0x3b, 0xa4, 0x8b, 0xbd, 0x64, 0xb6, 0x2e, 0xa7, 0xb2, 0xf5, 0x36, 0x58, 0x0b, 0x2e, 0x75, 0xdb,
	0xb1, 0xf0, 0x25, 0xff, 0xd8, 0x58, 0x0d, 0x2e, 0x65, 0xb2, 0x24, 0xaf, 0xc9, 0xdc, 0x52, 0x33,
	0x56, 0xdc, 0xf3, 0x54, 0x42, 0x2d, 0xb7, 0xc0, 0x32, 0x33, 0x63, 0x1f, 0x11, 0x6c, 0x51, 0xf9,
	0xbf, 0x45, 0x00, 0x27, 0x9f, 0x86, 0xd7, 0xc9, 0x85, 0xa8, 0x4e, 0xb2, 0xda, 0xc6, 0xc8, 0x4a,
	0x6a, 0xdb, 0x43, 0x50, 0xf2, 0xf0, 0xc0, 0xb0, 0x1d, 0x32, 0x10, 0x11, 0x22, 0xb2, 0x92, 0x5a,
	0x8c, 0x84, 0xf5, 0xb1, 0x52, 0xba, 0x94, 0x2e, 0xa5, 0x71, 0x15, 0x5c, 0x9e, 0x57, 0x05, 0x57,
	0xb2, 0xab, 0xe0, 0xea, 0x94, 0x2a, 0x38, 0xbd, 0xf2, 0x8e, 0xd5, 0xc6, 0xfc, 0x44, 0x6d, 0x3c,
	0x01, 0xab, 0xe1, 0x14, 0x06, 0x68, 0x06, 0xbf, 0xc8, 0xc8, 0xe0, 0x03, 0x3e, 0x9e, 0xb1, 0xaf,
	0x83, 0xd0, 0x38, 0x6e, 0x3d, 0x85, 0x64, 0xeb, 0x49, 0x77, 0x8f, 0xe2, 0x78, 0xf7, 0x88, 0xf8,
	0x5d, 0xca, 0xe6, 0xf7, 0xce, 0xaf, 0xa0, 0x98, 0xdc, 0xfa, 0x47, 0x3e, 0xd2, 0x9f, 0xfd, 0xd7,
	0x1a, 0x58, 0x0b, 0xfd, 0xc1, 0xdb, 0xe0, 0x26, 0x52, 0x9a, 0xba, 0x84, 0x90, 0x82, 0xf4, 0x4e,
	0x4b, 0x6d, 0x4b, 0x55, 0xf9, 0x44, 0x96, 0x6a, 0xc2, 0x4f, 0x70, 0x1b, 0xc0, 0x58, 0xd5, 0x52,
	0xd8, 0x0f, 0x61, 0x01, 0x96, 0xc1, 0x56, 0x2c, 0x57, 0x3a, 0x9a, 0xae, 0x9c, 0xe8, 0x75, 0x51,
	0x15, 0x72, 0xf0, 0x2e, 0x28, 0xc7, 0x1a, 0x55, 0x13, 0xab, 0x1f, 0x75, 0xe5, 0x93, 0x84, 0x4e,
	0x1a, 0xca, 0x67, 0x61, 0x11, 0xde, 0x03, 0xb7, 0xc7, 0xb5, 0x9d, 0x56, 0x8d, 0xab, 0x97, 0xe0,
	0x23, 0xb0, 0x1b, 0xab, 0x9b, 0xe2, 0x17, 0xbd, 0xaa, 0xd4, 0x24, 0x5d, 0x95, 0x7f, 0x97, 0x74,
	0xe9, 0x4b, 0x55, 0x92, 0x6a, 0x52, 0x4d, 0x58, 0x86, 0xfb, 0xe0, 0x51, 0x8c, 0xaa, 0x2a, 0x2d,
	0x0d, 0x89, 0x55, 0x4d, 0x17, 0x6b, 0x35, 0x24, 0xa9, 0xaa, 0x5e, 0x55, 0x1a, 0x0d, 0x59, 0x95,
	0x95, 0x96, 0xb0, 0x02, 0x77, 0xc1, 0xdd, 0x18, 0x29, 0x7d, 0x91, 0xaa, 0x1d, 0x4d, 0x56, 0x5a,
	0x3a, 0x92, 0x3e, 0x49, 0x48, 0x93, 0x6a, 0xc2, 0x2a, 0xac, 0x80, 0xfb, 0x13, 0x17, 0xa9, 0x2a,
	0x9d, 0x96, 0x26, 0x21, 0x55, 0x57, 0x35, 0xa9, 0x2d, 0xac, 0xa5, 0x4f, 0x35, 0x8e, 0xf9, 0x28,
	0x55, 0xab, 0xe2, 0x47, 0x21, 0x3f, 0x1f, 0x75, 0x2c, 0xb7, 0x44, 0xf4, 0x55, 0x00, 0x70, 0x0f,
	0xdc, 0x9b, 0x8d, 0x6a, 0x4a, 0x4d, 0xa1, 0x00, 0x1f, 0x82, 0x07, 0xb3, 0x21, 0x22, 0x92, 0xb5,
	0x53, 0xa1, 0x08, 0x1f, 0x83, 0xbd, 0xd9, 0xa0, 0xb6, 0x58, 0xab, 0xc9, 0xad, 0xba, 0x50, 0x82,
	0x4f, 0x40, 0x65, 0x0e, 0x4c, 0x51, 0x25, 0xb9, 0xa6, 0xb4, 0x84, 0x75, 0xb8, 0x03, 0xb6, 0x63,
	0x9c, 0xdc, 0xfa, 0x24, 0x36, 0xe4, 0x9a, 0xfe, 0xf7, 0x4e, 0xb3, 0x2d, 0x6c, 0xa4, 0x5f, 0x34,
	0xd4, 0x29, 0x6d, 0xf2, 0x34, 0x82, 0x30, 0x5d, 0xab, 0x6a, 0xa2, 0x26, 0x57, 0x85, 0x1b, 0xe9,
	0xa7, 0x0a, 0xb5, 0xc7, 0x5f, 0x35, 0x89, 0x3d, 0xac, 0x26, 0x22, 0x4d, 0xd5, 0xa5, 0x13, 0x01,
	0xc2, 0x9f, 0xc1, 0xe3, 0x24, 0x52, 0x43, 0x72, 0x4b, 0x95, 0xab, 0xb1, 0x47, 0xb9, 0xde, 0x12,
	0xb5, 0x0e, 0x92, 0x84, 0xcd, 0x71, 0xa7, 0xe3, 0xd0, 0xea, 0xa9, 0x28, 0xb7, 0x74, 0xb9, 0x26,
	0x6c, 0xa5, 0xa3, 0x34, 0x89, 0x6c, 0x29, 0xad, 0xaa, 0x24, 0xdc, 0xcc, 0xda, 0xbb, 0x2e, 0xaa,
	0x7a, 0x43, 0x6e, 0xca, 0x9a, 0xb0, 0x0d, 0x9f, 0x82, 0x87, 0xf3, 0xa0, 0xc7, 0x62, 0x43, 0x24,
	0x3e, 0x6f, 0xc1, 0x43, 0xf0, 0x7c, 0x3e, 0x50, 0xab, 0x9e, 0x26, 0x3c, 0x97, 0xe1, 0x73, 0xf0,
	0x74, 0x6e, 0x00, 0x24, 0xc2, 0x13, 0x4a, 0x08, 0xe1, 0xf6, 0xac, 0x63, 0x68, 0x5f, 0xa8, 0xcb,
	0x88, 0x70, 0x3b, 0x69, 0x06, 0xb0, 0x4d, 0x6b, 0xa2, 0x26, 0xea, 0x9a, 0xa2, 0xe8, 0xc7, 0x72,
	0x5d, 0xb8, 0x93, 0xce, 0xc8, 0x4e, 0x4b, 0xed, 0xb4, 0xdb, 0x0a, 0x21, 0x87, 0x7e, 0xa2, 0xa0,
	0x8f, 0x24, 0x8c, 0x77, 0xd3, 0x05, 0x22, 0x3c, 0x10, 0x6a, 0xb4, 0x85, 0x7b, 0xcf, 0xfe, 0x65,
	0x07, 0x94, 0x52, 0xff, 0xff, 0x05, 0xde, 0x07, 0x3b, 0x8c, 0x69, 0x84, 0x72, 0x53, 0x4a, 0xca,
	0x1d, 0x70, 0x6b, 0x4c, 0x9f, 0xa8, 0x2b, 0x93, 0xca, 0xda, 0x31, 0x57, 0xe6, 0xe0, 0x11, 0x38,
	0x18, 0x53, 0xaa, 0x4d, 0xbd, 0x49, 0x1e, 0x3b, 0x4a, 0xe9, 0xf0, 0xe6, 0x94, 0xba, 0xaa, 0xb0,
	0x08, 0xdf, 0x80, 0xc3, 0x6b, 0xdb, 0x70, 0x2a, 0x2f, 0xfd, 0x90, 0x11, 0x67, 0xf6, 0x32, 0x7c,
	0x05, 0x5e, 0x5c, 0xdb, 0x88, 0x10, 0x7d, 0xe5, 0x87, 0xee, 0xc3, 0x78, 0xbf, 0x0a, 0x7f, 0x01,
	0xaf, 0xae, 0x6d, 0x13, 0x96, 0x81, 0x35, 0xf8, 0x16, 0xbc, 0xbe, 0xbe, 0x55, 0x58, 0x15, 0xf2,
	0xa4, 0x7a, 0x4c, 0x3e, 0xe5, 0x44, 0x7e, 0x00, 0x52, 0xb1, 0xc6, 0x70, 0x9c, 0x07, 0x7a, 0x53,
	0x56, 0x9b, 0x24, 0xe9, 0x84, 0x02, 0x29, 0xfd, 0x63, 0xa0, 0x13, 0x49, 0x3c, 0x52, 0xab, 0x62,
	0x43, 0x44, 0x42, 0x91, 0x74, 0x94, 0x31, 0xb5, 0xa6, 0xa8, 0x6f, 0x8e, 0x84, 0x12, 0x3c, 0x00,
	0xcf, 0x66, 0x1c, 0x3e, 0x4c, 0xc5, 0x4e, 0x8b, 0x94, 0x07, 0xa9, 0xa6, 0x6b, 0x5f, 0x84, 0xf5,
	0x6b, 0xe0, 0x5b, 0x4a, 0x74, 0x6f, 0x61, 0x03, 0x7e, 0x00, 0x6f, 0x67, 0xe0, 0x69, 0xd0, 0x75,
	0xa9, 0x8a, 0xa4, 0x2a, 0x09, 0x8f, 0x5e, 0x93, 0x3f, 0xc9, 0x35, 0x49, 0x3f, 0xfe, 0xaa, 0xff,
	0x2e, 0x21, 0x45, 0x10, 0x08, 0xc9, 0x67, 0x99, 0xf2, 0x6e, 0xc4, 0x6b, 0x2e, 0x12, 0x5b, 0x75,
	0x49, 0xb8, 0x41, 0x48, 0x9e, 0x61, 0xd0, 0x92, 0xea, 0xa2, 0x26, 0x7f, 0x92, 0x04, 0x38, 0xe7,
	0x22, 0xaa, 0xa6, 0x20, 0xb1, 0x2e, 0x45, 0x17, 0xfa, 0x28, 0x7d, 0x15, 0x36, 0x09, 0xd7, 0x67,
	0xe0, 0x4f, 0x45, 0xf5, 0xf4, 0xa3, 0xb0, 0x35, 0x27, 0xe3, 0x28, 0x82, 0x75, 0xda, 0xd4, 0x91,
	0x6f, 0x66, 0xda, 0xb4, 0x15, 0x55, 0xa6, 0x5d, 0x35, 0x3a, 0xf9, 0x36, 0xfc, 0x1b, 0xf8, 0xcb,
	0xf5, 0x6c, 0xda, 0x8d, 0x8e, 0x3a, 0x65, 0xd7, 0x5b, 0xf0, 0x3d, 0xf8, 0x65, 0x9e, 0x87, 0x9a,
	0x5c, 0x97, 0xd4, 0xb8, 0xe7, 0xb7, 0x14, 0x4d, 0x3f, 0x51, 0x3a, 0xad, 0x9a, 0x50, 0x9e, 0xc3,
	0x90, 0xa4, 0x25, 0xb1, 0xa8, 0x2a, 0xcd, 0x76, 0x43, 0x22, 0x73, 0xc0, 0xed, 0x8c, 0xd8, 0xb5,
	0x85, 0x9d, 0x8c, 0x38, 0xb4, 0xa7, 0xdc, 0xe2, 0x4e, 0xa6, 0xcd, 0x64, 0xec, 0xee, 0x66, 0xc4,
	0xae, 0x9d, 0x19, 0xbb, 0x7b, 0x19, 0xb1, 0x6b, 0xcf, 0x8c, 0xdd, 0xfd, 0x8c, 0xd8, 0xb5, 0xa7,
	0xc6, 0xee, 0x01, 0x7c, 0x07, 0xde, 0xcc, 0xb0, 0x6a, 0x4a, 0x4d, 0xb1, 0x21, 0xd7, 0x5b, 0xba,
	0x72, 0x72, 0xa2, 0x4a, 0x5a, 0xfa, 0xa0, 0xbb, 0xf0, 0x19, 0x78, 0x32, 0xcb, 0xb0, 0xd3, 0xd0,
	0xe4, 0x76, 0x43, 0xd2, 0x4f, 0x90, 0x24, 0xc9, 0x2d, 0x61, 0x8f, 0xb4, 0xa9, 0x59, 0xcc, 0x51,
	0x55, 0x09, 0x69, 0x42, 0x65, 0x0e, 0xa4, 0x29, 0x35, 0x15, 0xf4, 0x55, 0x78, 0x38, 0xa7, 0x48,
	0x87, 0x94, 0x42, 0x92, 0x58, 0x8b, 0xcb, 0xd6, 0x23, 0xf8, 0x1a, 0xbc, 0xcc, 0xb0, 0xf8, 0x8c,
	0x64, 0x2d, 0x51, 0xe9, 0x1e, 0xcf, 0xa9, 0x0a, 0x2c, 0xfb, 0x3f, 0x89, 0x8d, 0x4e, 0xc2, 0xe0,
	0xc9, 0x9c, 0x3d, 0x38, 0x5d, 0x58, 0x21, 0x8f, 0x4d, 0x9e, 0xce, 0xa9, 0x0d, 0x09, 0x26, 0x47,
	0xf8, 0xfd, 0x39, 0x2d, 0x8d, 0xe2, 0x1b, 0x52, 0x4b, 0x6f, 0x48, 0xad, 0xba, 0x76, 0x1a, 0x1b,
	0xfd, 0x3c, 0x27, 0x5a, 0x91, 0x51, 0x55, 0x6c, 0x34, 0x48, 0xe1, 0xfd, 0x2c, 0x57, 0x25, 0xe1,
	0x59, 0x96, 0x45, 0x22, 0x81, 0x58, 0xca, 0x3d, 0x87, 0x7f, 0x02, 0x47, 0xd7, 0xb0, 0xe0, 0xff,
	0x89, 0xce, 0xf6, 0x22, 0xeb, 0x42, 0xdc, 0x20, 0x75, 0xbc, 0x97, 0x19, 0x2f, 0xd3, 0x1e, 0x7f,
	0x99, 0x83, 0x8c, 0x97, 0x69, 0x4f, 0xbe, 0xcc, 0x61, 0xc6, 0xcb, 0xb4, 0xc7, 0x5e, 0xe6, 0x55,
	0xc6, 0x45, 0xda, 0xd3, 0x5e, 0xe6, 0x75, 0x46, 0x9c, 0xdb, 0x13, 0x2f, 0x73, 0x94, 0x11, 0xe7,
	0xf6, 0x8c, 0x38, 0xbf, 0xc9, 0x3a, 0xde, 0xb4, 0x38, 0xff, 0x42, 0x06, 0xea, 0xb9, 0x2d, 0x35,
	0xf2, 0xff, 0x76, 0x8e, 0xff, 0xf1, 0xee, 0x1b, 0x19, 0xfd, 0x69, 0x4e, 0x8c, 0xd9, 0x38, 0x46,
	0x8a, 0x5b, 0x8c, 0x7f, 0x97, 0x8d, 0x57, 0x3b, 0xc7, 0x31, 0xfe, 0x3d, 0x7c, 0x09, 0x7e, 0x9e,
	0x8f, 0x6f, 0x24, 0x62, 0xf4, 0xe1, 0x1a, 0xee, 0x93, 0xf8, 0x5f, 0xb3, 0xdd, 0x4b, 0xff, 0x18,
	0xc3, 0xff, 0x7c, 0x8d, 0xdb, 0xb6, 0x12, 0xb7, 0xfd, 0x4b, 0xb6, 0x7b, 0x25, 0x11, 0xcc, 0xbf,
	0x66, 0xbb, 0xff, 0x92, 0xc4, 0xff, 0xc3, 0x9c, 0xa6, 0x16, 0x95, 0xfb, 0xb1, 0x92, 0xf8, 0xdb,
	0x9c, 0x57, 0x4e, 0xdb, 0xbc, 0x8f, 0x8d, 0xfe, 0x36, 0x87, 0x7c, 0x91, 0x51, 0xba, 0x5a, 0x8b,
	0xf0, 0x05, 0xd8, 0x9f, 0x61, 0xf2, 0xf7, 0x66, 0xbb, 0x95, 0xee, 0x3f, 0xc7, 0x99, 0xa3, 0x0d,
	0xf5, 0x9e, 0xb2, 0xa9, 0x66, 0xb6, 0xf4, 0x49, 0x9b, 0xda, 0xd1, 0xbf, 0x2f, 0x80, 0x8d, 0xf0,
	0x23, 0x49, 0xc5, 0xde, 0x37, 0xdb, 0xc4, 0xb0, 0x03, 0x8a, 0xc9, 0x3f, 0x3b, 0xc3, 0xdd, 0xac,
	0x7f, 0x3c, 0xb2, 0xb3, 0x97, 0xf9, 0x37, 0xeb, 0xca, 0x4f, 0x50, 0x01, 0xeb, 0xe9, 0xbf, 0xe2,
	0xc2, 0xed, 0x03, 0xf6, 0xcf, 0x97, 0x0e, 0xc2, 0x7f, 0xbe, 0x74, 0x20, 0x0d, 0x86, 0xc1, 0xd5,
	0xce, 0xc3, 0x94, 0xbb, 0xe9, 0x7f, 0xfa, 0xad, 0xfc, 0x74, 0xfc, 0xdb, 0xef, 0x7f, 0xed, 0xd9,
	0xc1, 0xf9, 0xa8, 0x7b, 0x60, 0xba, 0x83, 0xc3, 0x57, 0x97, 0x6d, 0xb7, 0x7f, 0xd5, 0x73, 0x9d,
	0x43, 0xd3, 0xba, 0x78, 0xf9, 0xcd, 0xe8, 0xdb, 0x96, 0x3d, 0x1a, 0xbc, 0x74, 0x5c, 0x0b, 0x1f,
	0xd2, 0xff, 0x67, 0x7c, 0xe8, 0x8d, 0x9c, 0xc0, 0x1e, 0xe0, 0xc3, 0xd0, 0x79, 0x77, 0x85, 0xee,
	0xfb, 0xe6, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xf5, 0xba, 0x74, 0x63, 0x25, 0x00, 0x00,
}
