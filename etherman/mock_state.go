// Code generated by mockery v2.39.0. DO NOT EDIT.

package etherman

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v4"
)

// stateMock is an autogenerated mock type for the stateProvider type
type stateMock struct {
	mock.Mock
}

// GetForcedBatchDataByNumbers provides a mock function with given fields: ctx, batchNumbers, dbTx
func (_m *stateMock) GetForcedBatchDataByNumbers(ctx context.Context, batchNumbers []uint64, dbTx pgx.Tx) (map[uint64][]byte, error) {
	ret := _m.Called(ctx, batchNumbers, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for GetForcedBatchDataByNumbers")
	}

	var r0 map[uint64][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint64, pgx.Tx) (map[uint64][]byte, error)); ok {
		return rf(ctx, batchNumbers, dbTx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uint64, pgx.Tx) map[uint64][]byte); ok {
		r0 = rf(ctx, batchNumbers, dbTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint64][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uint64, pgx.Tx) error); ok {
		r1 = rf(ctx, batchNumbers, dbTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newStateMock creates a new instance of stateMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newStateMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *stateMock {
	mock := &stateMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
