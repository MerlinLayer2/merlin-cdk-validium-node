// Code generated by mockery. DO NOT EDIT.

package mock_syncinterfaces

import (
	context "context"

	syncinterfaces "github.com/0xPolygonHermez/zkevm-node/synchronizer/common/syncinterfaces"
	mock "github.com/stretchr/testify/mock"
)

// AsyncL1BlockChecker is an autogenerated mock type for the AsyncL1BlockChecker type
type AsyncL1BlockChecker struct {
	mock.Mock
}

type AsyncL1BlockChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *AsyncL1BlockChecker) EXPECT() *AsyncL1BlockChecker_Expecter {
	return &AsyncL1BlockChecker_Expecter{mock: &_m.Mock}
}

// GetResult provides a mock function with given fields:
func (_m *AsyncL1BlockChecker) GetResult() *syncinterfaces.IterationResult {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResult")
	}

	var r0 *syncinterfaces.IterationResult
	if rf, ok := ret.Get(0).(func() *syncinterfaces.IterationResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*syncinterfaces.IterationResult)
		}
	}

	return r0
}

// AsyncL1BlockChecker_GetResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResult'
type AsyncL1BlockChecker_GetResult_Call struct {
	*mock.Call
}

// GetResult is a helper method to define mock.On call
func (_e *AsyncL1BlockChecker_Expecter) GetResult() *AsyncL1BlockChecker_GetResult_Call {
	return &AsyncL1BlockChecker_GetResult_Call{Call: _e.mock.On("GetResult")}
}

func (_c *AsyncL1BlockChecker_GetResult_Call) Run(run func()) *AsyncL1BlockChecker_GetResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AsyncL1BlockChecker_GetResult_Call) Return(_a0 *syncinterfaces.IterationResult) *AsyncL1BlockChecker_GetResult_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AsyncL1BlockChecker_GetResult_Call) RunAndReturn(run func() *syncinterfaces.IterationResult) *AsyncL1BlockChecker_GetResult_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx, onFinish
func (_m *AsyncL1BlockChecker) Run(ctx context.Context, onFinish func()) {
	_m.Called(ctx, onFinish)
}

// AsyncL1BlockChecker_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type AsyncL1BlockChecker_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - onFinish func()
func (_e *AsyncL1BlockChecker_Expecter) Run(ctx interface{}, onFinish interface{}) *AsyncL1BlockChecker_Run_Call {
	return &AsyncL1BlockChecker_Run_Call{Call: _e.mock.On("Run", ctx, onFinish)}
}

func (_c *AsyncL1BlockChecker_Run_Call) Run(run func(ctx context.Context, onFinish func())) *AsyncL1BlockChecker_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func()))
	})
	return _c
}

func (_c *AsyncL1BlockChecker_Run_Call) Return() *AsyncL1BlockChecker_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *AsyncL1BlockChecker_Run_Call) RunAndReturn(run func(context.Context, func())) *AsyncL1BlockChecker_Run_Call {
	_c.Call.Return(run)
	return _c
}

// RunSynchronous provides a mock function with given fields: ctx
func (_m *AsyncL1BlockChecker) RunSynchronous(ctx context.Context) syncinterfaces.IterationResult {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RunSynchronous")
	}

	var r0 syncinterfaces.IterationResult
	if rf, ok := ret.Get(0).(func(context.Context) syncinterfaces.IterationResult); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(syncinterfaces.IterationResult)
	}

	return r0
}

// AsyncL1BlockChecker_RunSynchronous_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunSynchronous'
type AsyncL1BlockChecker_RunSynchronous_Call struct {
	*mock.Call
}

// RunSynchronous is a helper method to define mock.On call
//   - ctx context.Context
func (_e *AsyncL1BlockChecker_Expecter) RunSynchronous(ctx interface{}) *AsyncL1BlockChecker_RunSynchronous_Call {
	return &AsyncL1BlockChecker_RunSynchronous_Call{Call: _e.mock.On("RunSynchronous", ctx)}
}

func (_c *AsyncL1BlockChecker_RunSynchronous_Call) Run(run func(ctx context.Context)) *AsyncL1BlockChecker_RunSynchronous_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AsyncL1BlockChecker_RunSynchronous_Call) Return(_a0 syncinterfaces.IterationResult) *AsyncL1BlockChecker_RunSynchronous_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AsyncL1BlockChecker_RunSynchronous_Call) RunAndReturn(run func(context.Context) syncinterfaces.IterationResult) *AsyncL1BlockChecker_RunSynchronous_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *AsyncL1BlockChecker) Stop() {
	_m.Called()
}

// AsyncL1BlockChecker_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type AsyncL1BlockChecker_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *AsyncL1BlockChecker_Expecter) Stop() *AsyncL1BlockChecker_Stop_Call {
	return &AsyncL1BlockChecker_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *AsyncL1BlockChecker_Stop_Call) Run(run func()) *AsyncL1BlockChecker_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AsyncL1BlockChecker_Stop_Call) Return() *AsyncL1BlockChecker_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *AsyncL1BlockChecker_Stop_Call) RunAndReturn(run func()) *AsyncL1BlockChecker_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewAsyncL1BlockChecker creates a new instance of AsyncL1BlockChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAsyncL1BlockChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *AsyncL1BlockChecker {
	mock := &AsyncL1BlockChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
