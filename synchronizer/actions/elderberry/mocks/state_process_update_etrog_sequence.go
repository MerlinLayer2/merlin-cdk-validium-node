// Code generated by mockery. DO NOT EDIT.

package mock_elderberry

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	metrics "github.com/0xPolygonHermez/zkevm-node/state/metrics"

	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v4"

	state "github.com/0xPolygonHermez/zkevm-node/state"
)

// stateProcessUpdateEtrogSequence is an autogenerated mock type for the stateProcessUpdateEtrogSequence type
type stateProcessUpdateEtrogSequence struct {
	mock.Mock
}

type stateProcessUpdateEtrogSequence_Expecter struct {
	mock *mock.Mock
}

func (_m *stateProcessUpdateEtrogSequence) EXPECT() *stateProcessUpdateEtrogSequence_Expecter {
	return &stateProcessUpdateEtrogSequence_Expecter{mock: &_m.Mock}
}

// AddSequence provides a mock function with given fields: ctx, sequence, dbTx
func (_m *stateProcessUpdateEtrogSequence) AddSequence(ctx context.Context, sequence state.Sequence, dbTx pgx.Tx) error {
	ret := _m.Called(ctx, sequence, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for AddSequence")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, state.Sequence, pgx.Tx) error); ok {
		r0 = rf(ctx, sequence, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// stateProcessUpdateEtrogSequence_AddSequence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSequence'
type stateProcessUpdateEtrogSequence_AddSequence_Call struct {
	*mock.Call
}

// AddSequence is a helper method to define mock.On call
//   - ctx context.Context
//   - sequence state.Sequence
//   - dbTx pgx.Tx
func (_e *stateProcessUpdateEtrogSequence_Expecter) AddSequence(ctx interface{}, sequence interface{}, dbTx interface{}) *stateProcessUpdateEtrogSequence_AddSequence_Call {
	return &stateProcessUpdateEtrogSequence_AddSequence_Call{Call: _e.mock.On("AddSequence", ctx, sequence, dbTx)}
}

func (_c *stateProcessUpdateEtrogSequence_AddSequence_Call) Run(run func(ctx context.Context, sequence state.Sequence, dbTx pgx.Tx)) *stateProcessUpdateEtrogSequence_AddSequence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(state.Sequence), args[2].(pgx.Tx))
	})
	return _c
}

func (_c *stateProcessUpdateEtrogSequence_AddSequence_Call) Return(_a0 error) *stateProcessUpdateEtrogSequence_AddSequence_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *stateProcessUpdateEtrogSequence_AddSequence_Call) RunAndReturn(run func(context.Context, state.Sequence, pgx.Tx) error) *stateProcessUpdateEtrogSequence_AddSequence_Call {
	_c.Call.Return(run)
	return _c
}

// AddVirtualBatch provides a mock function with given fields: ctx, virtualBatch, dbTx
func (_m *stateProcessUpdateEtrogSequence) AddVirtualBatch(ctx context.Context, virtualBatch *state.VirtualBatch, dbTx pgx.Tx) error {
	ret := _m.Called(ctx, virtualBatch, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for AddVirtualBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *state.VirtualBatch, pgx.Tx) error); ok {
		r0 = rf(ctx, virtualBatch, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// stateProcessUpdateEtrogSequence_AddVirtualBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddVirtualBatch'
type stateProcessUpdateEtrogSequence_AddVirtualBatch_Call struct {
	*mock.Call
}

// AddVirtualBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - virtualBatch *state.VirtualBatch
//   - dbTx pgx.Tx
func (_e *stateProcessUpdateEtrogSequence_Expecter) AddVirtualBatch(ctx interface{}, virtualBatch interface{}, dbTx interface{}) *stateProcessUpdateEtrogSequence_AddVirtualBatch_Call {
	return &stateProcessUpdateEtrogSequence_AddVirtualBatch_Call{Call: _e.mock.On("AddVirtualBatch", ctx, virtualBatch, dbTx)}
}

func (_c *stateProcessUpdateEtrogSequence_AddVirtualBatch_Call) Run(run func(ctx context.Context, virtualBatch *state.VirtualBatch, dbTx pgx.Tx)) *stateProcessUpdateEtrogSequence_AddVirtualBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*state.VirtualBatch), args[2].(pgx.Tx))
	})
	return _c
}

func (_c *stateProcessUpdateEtrogSequence_AddVirtualBatch_Call) Return(_a0 error) *stateProcessUpdateEtrogSequence_AddVirtualBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *stateProcessUpdateEtrogSequence_AddVirtualBatch_Call) RunAndReturn(run func(context.Context, *state.VirtualBatch, pgx.Tx) error) *stateProcessUpdateEtrogSequence_AddVirtualBatch_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessAndStoreClosedBatchV2 provides a mock function with given fields: ctx, processingCtx, dbTx, caller
func (_m *stateProcessUpdateEtrogSequence) ProcessAndStoreClosedBatchV2(ctx context.Context, processingCtx state.ProcessingContextV2, dbTx pgx.Tx, caller metrics.CallerLabel) (common.Hash, uint64, string, error) {
	ret := _m.Called(ctx, processingCtx, dbTx, caller)

	if len(ret) == 0 {
		panic("no return value specified for ProcessAndStoreClosedBatchV2")
	}

	var r0 common.Hash
	var r1 uint64
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, state.ProcessingContextV2, pgx.Tx, metrics.CallerLabel) (common.Hash, uint64, string, error)); ok {
		return rf(ctx, processingCtx, dbTx, caller)
	}
	if rf, ok := ret.Get(0).(func(context.Context, state.ProcessingContextV2, pgx.Tx, metrics.CallerLabel) common.Hash); ok {
		r0 = rf(ctx, processingCtx, dbTx, caller)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, state.ProcessingContextV2, pgx.Tx, metrics.CallerLabel) uint64); ok {
		r1 = rf(ctx, processingCtx, dbTx, caller)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, state.ProcessingContextV2, pgx.Tx, metrics.CallerLabel) string); ok {
		r2 = rf(ctx, processingCtx, dbTx, caller)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(context.Context, state.ProcessingContextV2, pgx.Tx, metrics.CallerLabel) error); ok {
		r3 = rf(ctx, processingCtx, dbTx, caller)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// stateProcessUpdateEtrogSequence_ProcessAndStoreClosedBatchV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessAndStoreClosedBatchV2'
type stateProcessUpdateEtrogSequence_ProcessAndStoreClosedBatchV2_Call struct {
	*mock.Call
}

// ProcessAndStoreClosedBatchV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - processingCtx state.ProcessingContextV2
//   - dbTx pgx.Tx
//   - caller metrics.CallerLabel
func (_e *stateProcessUpdateEtrogSequence_Expecter) ProcessAndStoreClosedBatchV2(ctx interface{}, processingCtx interface{}, dbTx interface{}, caller interface{}) *stateProcessUpdateEtrogSequence_ProcessAndStoreClosedBatchV2_Call {
	return &stateProcessUpdateEtrogSequence_ProcessAndStoreClosedBatchV2_Call{Call: _e.mock.On("ProcessAndStoreClosedBatchV2", ctx, processingCtx, dbTx, caller)}
}

func (_c *stateProcessUpdateEtrogSequence_ProcessAndStoreClosedBatchV2_Call) Run(run func(ctx context.Context, processingCtx state.ProcessingContextV2, dbTx pgx.Tx, caller metrics.CallerLabel)) *stateProcessUpdateEtrogSequence_ProcessAndStoreClosedBatchV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(state.ProcessingContextV2), args[2].(pgx.Tx), args[3].(metrics.CallerLabel))
	})
	return _c
}

func (_c *stateProcessUpdateEtrogSequence_ProcessAndStoreClosedBatchV2_Call) Return(_a0 common.Hash, _a1 uint64, _a2 string, _a3 error) *stateProcessUpdateEtrogSequence_ProcessAndStoreClosedBatchV2_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *stateProcessUpdateEtrogSequence_ProcessAndStoreClosedBatchV2_Call) RunAndReturn(run func(context.Context, state.ProcessingContextV2, pgx.Tx, metrics.CallerLabel) (common.Hash, uint64, string, error)) *stateProcessUpdateEtrogSequence_ProcessAndStoreClosedBatchV2_Call {
	_c.Call.Return(run)
	return _c
}

// newStateProcessUpdateEtrogSequence creates a new instance of stateProcessUpdateEtrogSequence. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newStateProcessUpdateEtrogSequence(t interface {
	mock.TestingT
	Cleanup(func())
}) *stateProcessUpdateEtrogSequence {
	mock := &stateProcessUpdateEtrogSequence{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
