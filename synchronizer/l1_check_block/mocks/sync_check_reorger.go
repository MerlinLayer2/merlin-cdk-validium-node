// Code generated by mockery. DO NOT EDIT.

package mock_l1_check_block

import mock "github.com/stretchr/testify/mock"

// SyncCheckReorger is an autogenerated mock type for the SyncCheckReorger type
type SyncCheckReorger struct {
	mock.Mock
}

type SyncCheckReorger_Expecter struct {
	mock *mock.Mock
}

func (_m *SyncCheckReorger) EXPECT() *SyncCheckReorger_Expecter {
	return &SyncCheckReorger_Expecter{mock: &_m.Mock}
}

// ExecuteReorgFromMismatchBlock provides a mock function with given fields: blockNumber, reason
func (_m *SyncCheckReorger) ExecuteReorgFromMismatchBlock(blockNumber uint64, reason string) error {
	ret := _m.Called(blockNumber, reason)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteReorgFromMismatchBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, string) error); ok {
		r0 = rf(blockNumber, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SyncCheckReorger_ExecuteReorgFromMismatchBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteReorgFromMismatchBlock'
type SyncCheckReorger_ExecuteReorgFromMismatchBlock_Call struct {
	*mock.Call
}

// ExecuteReorgFromMismatchBlock is a helper method to define mock.On call
//   - blockNumber uint64
//   - reason string
func (_e *SyncCheckReorger_Expecter) ExecuteReorgFromMismatchBlock(blockNumber interface{}, reason interface{}) *SyncCheckReorger_ExecuteReorgFromMismatchBlock_Call {
	return &SyncCheckReorger_ExecuteReorgFromMismatchBlock_Call{Call: _e.mock.On("ExecuteReorgFromMismatchBlock", blockNumber, reason)}
}

func (_c *SyncCheckReorger_ExecuteReorgFromMismatchBlock_Call) Run(run func(blockNumber uint64, reason string)) *SyncCheckReorger_ExecuteReorgFromMismatchBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(string))
	})
	return _c
}

func (_c *SyncCheckReorger_ExecuteReorgFromMismatchBlock_Call) Return(_a0 error) *SyncCheckReorger_ExecuteReorgFromMismatchBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SyncCheckReorger_ExecuteReorgFromMismatchBlock_Call) RunAndReturn(run func(uint64, string) error) *SyncCheckReorger_ExecuteReorgFromMismatchBlock_Call {
	_c.Call.Return(run)
	return _c
}

// OnDetectedMismatchL1BlockReorg provides a mock function with given fields:
func (_m *SyncCheckReorger) OnDetectedMismatchL1BlockReorg() {
	_m.Called()
}

// SyncCheckReorger_OnDetectedMismatchL1BlockReorg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnDetectedMismatchL1BlockReorg'
type SyncCheckReorger_OnDetectedMismatchL1BlockReorg_Call struct {
	*mock.Call
}

// OnDetectedMismatchL1BlockReorg is a helper method to define mock.On call
func (_e *SyncCheckReorger_Expecter) OnDetectedMismatchL1BlockReorg() *SyncCheckReorger_OnDetectedMismatchL1BlockReorg_Call {
	return &SyncCheckReorger_OnDetectedMismatchL1BlockReorg_Call{Call: _e.mock.On("OnDetectedMismatchL1BlockReorg")}
}

func (_c *SyncCheckReorger_OnDetectedMismatchL1BlockReorg_Call) Run(run func()) *SyncCheckReorger_OnDetectedMismatchL1BlockReorg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SyncCheckReorger_OnDetectedMismatchL1BlockReorg_Call) Return() *SyncCheckReorger_OnDetectedMismatchL1BlockReorg_Call {
	_c.Call.Return()
	return _c
}

func (_c *SyncCheckReorger_OnDetectedMismatchL1BlockReorg_Call) RunAndReturn(run func()) *SyncCheckReorger_OnDetectedMismatchL1BlockReorg_Call {
	_c.Call.Return(run)
	return _c
}

// NewSyncCheckReorger creates a new instance of SyncCheckReorger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSyncCheckReorger(t interface {
	mock.TestingT
	Cleanup(func())
}) *SyncCheckReorger {
	mock := &SyncCheckReorger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
